/* tslint:disable */
/* eslint-disable */
/**
 * Neurelo API Spec
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
import { neureloConfig } from './configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, BaseAPI, operationServerMap, globalAxios } from './base';
export var CategoriesAggregateInputCountEnum = {
    All: '_all',
    CategoryName: 'categoryName',
    CreatedAt: 'createdAt',
    Id: 'id',
    UpdatedAt: 'updatedAt'
};
export var CategoriesAggregateInputMaxEnum = {
    CategoryName: 'categoryName',
    CreatedAt: 'createdAt',
    Id: 'id',
    UpdatedAt: 'updatedAt'
};
export var CategoriesAggregateInputMinEnum = {
    CategoryName: 'categoryName',
    CreatedAt: 'createdAt',
    Id: 'id',
    UpdatedAt: 'updatedAt'
};
export var CategoriesGroupByInputCountEnum = {
    All: '_all',
    CategoryName: 'categoryName',
    CreatedAt: 'createdAt',
    Id: 'id',
    UpdatedAt: 'updatedAt'
};
export var CategoriesGroupByInputMaxEnum = {
    CategoryName: 'categoryName',
    CreatedAt: 'createdAt',
    Id: 'id',
    UpdatedAt: 'updatedAt'
};
export var CategoriesGroupByInputMinEnum = {
    CategoryName: 'categoryName',
    CreatedAt: 'createdAt',
    Id: 'id',
    UpdatedAt: 'updatedAt'
};
/**
 *
 * @export
 * @enum {string}
 */
export var CategoriesScalarFieldEnum = {
    CategoryName: 'categoryName',
    CreatedAt: 'createdAt',
    Id: 'id',
    UpdatedAt: 'updatedAt'
};
/**
 *
 * @export
 * @enum {string}
 */
export var QueryMode = {
    Default: 'default',
    Insensitive: 'insensitive'
};
/**
 *
 * @export
 * @enum {string}
 */
export var SortOrder = {
    Asc: 'asc',
    Desc: 'desc'
};
/**
 *
 * @export
 * @enum {string}
 */
export var TaskStatus = {
    Inprogress: 'INPROGRESS',
    Completed: 'COMPLETED',
    New: 'NEW',
    Pending: 'PENDING'
};
export var UsersAggregateInputCountEnum = {
    All: '_all',
    CreatedAt: 'createdAt',
    Email: 'email',
    Id: 'id',
    PasswordHash: 'passwordHash',
    UpdatedAt: 'updatedAt',
    Username: 'username'
};
export var UsersAggregateInputMaxEnum = {
    CreatedAt: 'createdAt',
    Email: 'email',
    Id: 'id',
    PasswordHash: 'passwordHash',
    UpdatedAt: 'updatedAt',
    Username: 'username'
};
export var UsersAggregateInputMinEnum = {
    CreatedAt: 'createdAt',
    Email: 'email',
    Id: 'id',
    PasswordHash: 'passwordHash',
    UpdatedAt: 'updatedAt',
    Username: 'username'
};
export var UsersGroupByInputCountEnum = {
    All: '_all',
    CreatedAt: 'createdAt',
    Email: 'email',
    Id: 'id',
    PasswordHash: 'passwordHash',
    UpdatedAt: 'updatedAt',
    Username: 'username'
};
export var UsersGroupByInputMaxEnum = {
    CreatedAt: 'createdAt',
    Email: 'email',
    Id: 'id',
    PasswordHash: 'passwordHash',
    UpdatedAt: 'updatedAt',
    Username: 'username'
};
export var UsersGroupByInputMinEnum = {
    CreatedAt: 'createdAt',
    Email: 'email',
    Id: 'id',
    PasswordHash: 'passwordHash',
    UpdatedAt: 'updatedAt',
    Username: 'username'
};
/**
 *
 * @export
 * @enum {string}
 */
export var UsersScalarFieldEnum = {
    CreatedAt: 'createdAt',
    Email: 'email',
    Id: 'id',
    PasswordHash: 'passwordHash',
    UpdatedAt: 'updatedAt',
    Username: 'username'
};
/**
 * CategoriesApi - axios parameter creator
 * @export
 */
export var CategoriesApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         * Aggregate by categories
         * @param {CategoriesAggregateInput} select
         * @param {CategoriesWhereInput} [filter]
         * @param {Array<CategoriesOrderByWithRelationInput>} [orderBy]
         * @param {number} [skip]
         * @param {number} [take]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        aggregateByCategories: function (select, filter, orderBy, skip, take, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'select' is not null or undefined
                            assertParamExists('aggregateByCategories', 'select', select);
                            localVarPath = "/rest/categories/__aggregate";
                            localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKey required
                            return [4 /*yield*/, setApiKeyToObject(localVarHeaderParameter, "X-API-KEY", configuration)];
                        case 1:
                            // authentication ApiKey required
                            _a.sent();
                            if (select !== undefined) {
                                localVarQueryParameter['select'] = select;
                            }
                            if (filter !== undefined) {
                                localVarQueryParameter['filter'] = filter;
                            }
                            if (orderBy) {
                                localVarQueryParameter['order_by'] = orderBy;
                            }
                            if (skip !== undefined) {
                                localVarQueryParameter['skip'] = skip;
                            }
                            if (take !== undefined) {
                                localVarQueryParameter['take'] = take;
                            }
                            setSearchParams(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: toPathString(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Create multiple categories records
         * @param {Array<CategoriesCreateManyInput>} categoriesCreateManyInput
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createManyCategories: function (categoriesCreateManyInput, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'categoriesCreateManyInput' is not null or undefined
                            assertParamExists('createManyCategories', 'categoriesCreateManyInput', categoriesCreateManyInput);
                            localVarPath = "/rest/categories";
                            localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKey required
                            return [4 /*yield*/, setApiKeyToObject(localVarHeaderParameter, "X-API-KEY", configuration)];
                        case 1:
                            // authentication ApiKey required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            setSearchParams(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = serializeDataIfNeeded(categoriesCreateManyInput, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: toPathString(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Create one categories record
         * @param {CategoriesCreateInput} categoriesCreateInput
         * @param {CategoriesSelectInput} [select]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createOneCategories: function (categoriesCreateInput, select, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'categoriesCreateInput' is not null or undefined
                            assertParamExists('createOneCategories', 'categoriesCreateInput', categoriesCreateInput);
                            localVarPath = "/rest/categories/__one";
                            localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKey required
                            return [4 /*yield*/, setApiKeyToObject(localVarHeaderParameter, "X-API-KEY", configuration)];
                        case 1:
                            // authentication ApiKey required
                            _a.sent();
                            if (select !== undefined) {
                                localVarQueryParameter['select'] = select;
                            }
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            setSearchParams(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = serializeDataIfNeeded(categoriesCreateInput, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: toPathString(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Delete multiple categories records
         * @param {CategoriesWhereInput} [filter]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCategories: function (filter, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/rest/categories";
                            localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKey required
                            return [4 /*yield*/, setApiKeyToObject(localVarHeaderParameter, "X-API-KEY", configuration)];
                        case 1:
                            // authentication ApiKey required
                            _a.sent();
                            if (filter !== undefined) {
                                localVarQueryParameter['filter'] = filter;
                            }
                            setSearchParams(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: toPathString(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Delete one categories record by id
         * @param {string} value
         * @param {CategoriesSelectInput} [select]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCategoriesById: function (value, select, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'value' is not null or undefined
                            assertParamExists('deleteCategoriesById', 'value', value);
                            localVarPath = "/rest/categories/{value}"
                                .replace("{".concat("value", "}"), String(value));
                            localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKey required
                            return [4 /*yield*/, setApiKeyToObject(localVarHeaderParameter, "X-API-KEY", configuration)];
                        case 1:
                            // authentication ApiKey required
                            _a.sent();
                            if (select !== undefined) {
                                localVarQueryParameter['select'] = select;
                            }
                            setSearchParams(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: toPathString(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Retrieve multiple categories records
         * @param {CategoriesSelectInput} [select]
         * @param {CategoriesWhereInput} [filter]
         * @param {Array<CategoriesOrderByWithRelationInput>} [orderBy]
         * @param {number} [skip]
         * @param {number} [take]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findCategories: function (select, filter, orderBy, skip, take, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/rest/categories";
                            localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKey required
                            return [4 /*yield*/, setApiKeyToObject(localVarHeaderParameter, "X-API-KEY", configuration)];
                        case 1:
                            // authentication ApiKey required
                            _a.sent();
                            if (select !== undefined) {
                                localVarQueryParameter['select'] = select;
                            }
                            if (filter !== undefined) {
                                localVarQueryParameter['filter'] = filter;
                            }
                            if (orderBy) {
                                localVarQueryParameter['order_by'] = orderBy;
                            }
                            if (skip !== undefined) {
                                localVarQueryParameter['skip'] = skip;
                            }
                            if (take !== undefined) {
                                localVarQueryParameter['take'] = take;
                            }
                            setSearchParams(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: toPathString(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Find one categories record by id
         * @param {string} value
         * @param {CategoriesSelectInput} [select]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findCategoriesById: function (value, select, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'value' is not null or undefined
                            assertParamExists('findCategoriesById', 'value', value);
                            localVarPath = "/rest/categories/{value}"
                                .replace("{".concat("value", "}"), String(value));
                            localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKey required
                            return [4 /*yield*/, setApiKeyToObject(localVarHeaderParameter, "X-API-KEY", configuration)];
                        case 1:
                            // authentication ApiKey required
                            _a.sent();
                            if (select !== undefined) {
                                localVarQueryParameter['select'] = select;
                            }
                            setSearchParams(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: toPathString(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Group by categories
         * @param {CategoriesGroupByInput} select
         * @param {CategoriesWhereInput} [filter]
         * @param {Array<CategoriesOrderByWithAggregationInput>} [orderBy]
         * @param {Array<CategoriesScalarFieldEnum>} [groupBy]
         * @param {CategoriesScalarWhereWithAggregatesInput} [having]
         * @param {number} [skip]
         * @param {number} [take]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupByCategories: function (select, filter, orderBy, groupBy, having, skip, take, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'select' is not null or undefined
                            assertParamExists('groupByCategories', 'select', select);
                            localVarPath = "/rest/categories/__groupBy";
                            localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKey required
                            return [4 /*yield*/, setApiKeyToObject(localVarHeaderParameter, "X-API-KEY", configuration)];
                        case 1:
                            // authentication ApiKey required
                            _a.sent();
                            if (select !== undefined) {
                                localVarQueryParameter['select'] = select;
                            }
                            if (filter !== undefined) {
                                localVarQueryParameter['filter'] = filter;
                            }
                            if (orderBy) {
                                localVarQueryParameter['order_by'] = orderBy;
                            }
                            if (groupBy) {
                                localVarQueryParameter['group_by'] = groupBy;
                            }
                            if (having !== undefined) {
                                localVarQueryParameter['having'] = having;
                            }
                            if (skip !== undefined) {
                                localVarQueryParameter['skip'] = skip;
                            }
                            if (take !== undefined) {
                                localVarQueryParameter['take'] = take;
                            }
                            setSearchParams(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: toPathString(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Update multiple categories records
         * @param {CategoriesUpdateManyInput} categoriesUpdateManyInput
         * @param {CategoriesWhereInput} [filter]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCategories: function (categoriesUpdateManyInput, filter, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'categoriesUpdateManyInput' is not null or undefined
                            assertParamExists('updateCategories', 'categoriesUpdateManyInput', categoriesUpdateManyInput);
                            localVarPath = "/rest/categories";
                            localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'PATCH' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKey required
                            return [4 /*yield*/, setApiKeyToObject(localVarHeaderParameter, "X-API-KEY", configuration)];
                        case 1:
                            // authentication ApiKey required
                            _a.sent();
                            if (filter !== undefined) {
                                localVarQueryParameter['filter'] = filter;
                            }
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            setSearchParams(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = serializeDataIfNeeded(categoriesUpdateManyInput, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: toPathString(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Update one categories record by id
         * @param {string} value
         * @param {CategoriesUpdateInput} categoriesUpdateInput
         * @param {CategoriesSelectInput} [select]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCategoriesById: function (value, categoriesUpdateInput, select, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'value' is not null or undefined
                            assertParamExists('updateCategoriesById', 'value', value);
                            // verify required parameter 'categoriesUpdateInput' is not null or undefined
                            assertParamExists('updateCategoriesById', 'categoriesUpdateInput', categoriesUpdateInput);
                            localVarPath = "/rest/categories/{value}"
                                .replace("{".concat("value", "}"), String(value));
                            localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'PATCH' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKey required
                            return [4 /*yield*/, setApiKeyToObject(localVarHeaderParameter, "X-API-KEY", configuration)];
                        case 1:
                            // authentication ApiKey required
                            _a.sent();
                            if (select !== undefined) {
                                localVarQueryParameter['select'] = select;
                            }
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            setSearchParams(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = serializeDataIfNeeded(categoriesUpdateInput, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: toPathString(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
    };
};
/**
 * CategoriesApi - functional programming interface
 * @export
 */
export var CategoriesApiFp = function (configuration) {
    var localVarAxiosParamCreator = CategoriesApiAxiosParamCreator(configuration);
    return {
        /**
         * Aggregate by categories
         * @param {CategoriesAggregateInput} select
         * @param {CategoriesWhereInput} [filter]
         * @param {Array<CategoriesOrderByWithRelationInput>} [orderBy]
         * @param {number} [skip]
         * @param {number} [take]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        aggregateByCategories: function (select, filter, orderBy, skip, take, options) {
            var _a, _b, _c;
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.aggregateByCategories(select, filter, orderBy, skip, take, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = operationServerMap['CategoriesApi.aggregateByCategories']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * Create multiple categories records
         * @param {Array<CategoriesCreateManyInput>} categoriesCreateManyInput
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createManyCategories: function (categoriesCreateManyInput, options) {
            var _a, _b, _c;
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.createManyCategories(categoriesCreateManyInput, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = operationServerMap['CategoriesApi.createManyCategories']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * Create one categories record
         * @param {CategoriesCreateInput} categoriesCreateInput
         * @param {CategoriesSelectInput} [select]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createOneCategories: function (categoriesCreateInput, select, options) {
            var _a, _b, _c;
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.createOneCategories(categoriesCreateInput, select, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = operationServerMap['CategoriesApi.createOneCategories']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * Delete multiple categories records
         * @param {CategoriesWhereInput} [filter]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCategories: function (filter, options) {
            var _a, _b, _c;
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.deleteCategories(filter, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = operationServerMap['CategoriesApi.deleteCategories']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * Delete one categories record by id
         * @param {string} value
         * @param {CategoriesSelectInput} [select]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCategoriesById: function (value, select, options) {
            var _a, _b, _c;
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.deleteCategoriesById(value, select, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = operationServerMap['CategoriesApi.deleteCategoriesById']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * Retrieve multiple categories records
         * @param {CategoriesSelectInput} [select]
         * @param {CategoriesWhereInput} [filter]
         * @param {Array<CategoriesOrderByWithRelationInput>} [orderBy]
         * @param {number} [skip]
         * @param {number} [take]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findCategories: function (select, filter, orderBy, skip, take, options) {
            var _a, _b, _c;
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.findCategories(select, filter, orderBy, skip, take, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = operationServerMap['CategoriesApi.findCategories']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * Find one categories record by id
         * @param {string} value
         * @param {CategoriesSelectInput} [select]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findCategoriesById: function (value, select, options) {
            var _a, _b, _c;
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.findCategoriesById(value, select, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = operationServerMap['CategoriesApi.findCategoriesById']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * Group by categories
         * @param {CategoriesGroupByInput} select
         * @param {CategoriesWhereInput} [filter]
         * @param {Array<CategoriesOrderByWithAggregationInput>} [orderBy]
         * @param {Array<CategoriesScalarFieldEnum>} [groupBy]
         * @param {CategoriesScalarWhereWithAggregatesInput} [having]
         * @param {number} [skip]
         * @param {number} [take]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupByCategories: function (select, filter, orderBy, groupBy, having, skip, take, options) {
            var _a, _b, _c;
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.groupByCategories(select, filter, orderBy, groupBy, having, skip, take, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = operationServerMap['CategoriesApi.groupByCategories']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * Update multiple categories records
         * @param {CategoriesUpdateManyInput} categoriesUpdateManyInput
         * @param {CategoriesWhereInput} [filter]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCategories: function (categoriesUpdateManyInput, filter, options) {
            var _a, _b, _c;
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.updateCategories(categoriesUpdateManyInput, filter, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = operationServerMap['CategoriesApi.updateCategories']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * Update one categories record by id
         * @param {string} value
         * @param {CategoriesUpdateInput} categoriesUpdateInput
         * @param {CategoriesSelectInput} [select]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCategoriesById: function (value, categoriesUpdateInput, select, options) {
            var _a, _b, _c;
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.updateCategoriesById(value, categoriesUpdateInput, select, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = operationServerMap['CategoriesApi.updateCategoriesById']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
    };
};
/**
 * CategoriesApi - factory interface
 * @export
 */
export var CategoriesApiFactory = function (configuration, basePath, axios) {
    var localVarFp = CategoriesApiFp(configuration);
    return {
        /**
         * Aggregate by categories
         * @param {CategoriesAggregateInput} select
         * @param {CategoriesWhereInput} [filter]
         * @param {Array<CategoriesOrderByWithRelationInput>} [orderBy]
         * @param {number} [skip]
         * @param {number} [take]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        aggregateByCategories: function (select, filter, orderBy, skip, take, options) {
            return localVarFp.aggregateByCategories(select, filter, orderBy, skip, take, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Create multiple categories records
         * @param {Array<CategoriesCreateManyInput>} categoriesCreateManyInput
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createManyCategories: function (categoriesCreateManyInput, options) {
            return localVarFp.createManyCategories(categoriesCreateManyInput, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Create one categories record
         * @param {CategoriesCreateInput} categoriesCreateInput
         * @param {CategoriesSelectInput} [select]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createOneCategories: function (categoriesCreateInput, select, options) {
            return localVarFp.createOneCategories(categoriesCreateInput, select, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Delete multiple categories records
         * @param {CategoriesWhereInput} [filter]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCategories: function (filter, options) {
            return localVarFp.deleteCategories(filter, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Delete one categories record by id
         * @param {string} value
         * @param {CategoriesSelectInput} [select]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCategoriesById: function (value, select, options) {
            return localVarFp.deleteCategoriesById(value, select, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Retrieve multiple categories records
         * @param {CategoriesSelectInput} [select]
         * @param {CategoriesWhereInput} [filter]
         * @param {Array<CategoriesOrderByWithRelationInput>} [orderBy]
         * @param {number} [skip]
         * @param {number} [take]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findCategories: function (select, filter, orderBy, skip, take, options) {
            return localVarFp.findCategories(select, filter, orderBy, skip, take, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Find one categories record by id
         * @param {string} value
         * @param {CategoriesSelectInput} [select]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findCategoriesById: function (value, select, options) {
            return localVarFp.findCategoriesById(value, select, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Group by categories
         * @param {CategoriesGroupByInput} select
         * @param {CategoriesWhereInput} [filter]
         * @param {Array<CategoriesOrderByWithAggregationInput>} [orderBy]
         * @param {Array<CategoriesScalarFieldEnum>} [groupBy]
         * @param {CategoriesScalarWhereWithAggregatesInput} [having]
         * @param {number} [skip]
         * @param {number} [take]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupByCategories: function (select, filter, orderBy, groupBy, having, skip, take, options) {
            return localVarFp.groupByCategories(select, filter, orderBy, groupBy, having, skip, take, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Update multiple categories records
         * @param {CategoriesUpdateManyInput} categoriesUpdateManyInput
         * @param {CategoriesWhereInput} [filter]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCategories: function (categoriesUpdateManyInput, filter, options) {
            return localVarFp.updateCategories(categoriesUpdateManyInput, filter, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Update one categories record by id
         * @param {string} value
         * @param {CategoriesUpdateInput} categoriesUpdateInput
         * @param {CategoriesSelectInput} [select]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCategoriesById: function (value, categoriesUpdateInput, select, options) {
            return localVarFp.updateCategoriesById(value, categoriesUpdateInput, select, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
/**
 * CategoriesApi - object-oriented interface
 * @export
 * @class CategoriesApi
 * @extends {BaseAPI}
 */
var CategoriesApi = /** @class */ (function (_super) {
    __extends(CategoriesApi, _super);
    function CategoriesApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Aggregate by categories
     * @param {CategoriesAggregateInput} select
     * @param {CategoriesWhereInput} [filter]
     * @param {Array<CategoriesOrderByWithRelationInput>} [orderBy]
     * @param {number} [skip]
     * @param {number} [take]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CategoriesApi
     */
    CategoriesApi.prototype.aggregateByCategories = function (select, filter, orderBy, skip, take, options) {
        var _this = this;
        return CategoriesApiFp(this.configuration).aggregateByCategories(select, filter, orderBy, skip, take, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Create multiple categories records
     * @param {Array<CategoriesCreateManyInput>} categoriesCreateManyInput
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CategoriesApi
     */
    CategoriesApi.prototype.createManyCategories = function (categoriesCreateManyInput, options) {
        var _this = this;
        return CategoriesApiFp(this.configuration).createManyCategories(categoriesCreateManyInput, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Create one categories record
     * @param {CategoriesCreateInput} categoriesCreateInput
     * @param {CategoriesSelectInput} [select]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CategoriesApi
     */
    CategoriesApi.prototype.createOneCategories = function (categoriesCreateInput, select, options) {
        var _this = this;
        return CategoriesApiFp(this.configuration).createOneCategories(categoriesCreateInput, select, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Delete multiple categories records
     * @param {CategoriesWhereInput} [filter]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CategoriesApi
     */
    CategoriesApi.prototype.deleteCategories = function (filter, options) {
        var _this = this;
        return CategoriesApiFp(this.configuration).deleteCategories(filter, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Delete one categories record by id
     * @param {string} value
     * @param {CategoriesSelectInput} [select]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CategoriesApi
     */
    CategoriesApi.prototype.deleteCategoriesById = function (value, select, options) {
        var _this = this;
        return CategoriesApiFp(this.configuration).deleteCategoriesById(value, select, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Retrieve multiple categories records
     * @param {CategoriesSelectInput} [select]
     * @param {CategoriesWhereInput} [filter]
     * @param {Array<CategoriesOrderByWithRelationInput>} [orderBy]
     * @param {number} [skip]
     * @param {number} [take]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CategoriesApi
     */
    CategoriesApi.prototype.findCategories = function (select, filter, orderBy, skip, take, options) {
        var _this = this;
        return CategoriesApiFp(this.configuration).findCategories(select, filter, orderBy, skip, take, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Find one categories record by id
     * @param {string} value
     * @param {CategoriesSelectInput} [select]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CategoriesApi
     */
    CategoriesApi.prototype.findCategoriesById = function (value, select, options) {
        var _this = this;
        return CategoriesApiFp(this.configuration).findCategoriesById(value, select, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Group by categories
     * @param {CategoriesGroupByInput} select
     * @param {CategoriesWhereInput} [filter]
     * @param {Array<CategoriesOrderByWithAggregationInput>} [orderBy]
     * @param {Array<CategoriesScalarFieldEnum>} [groupBy]
     * @param {CategoriesScalarWhereWithAggregatesInput} [having]
     * @param {number} [skip]
     * @param {number} [take]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CategoriesApi
     */
    CategoriesApi.prototype.groupByCategories = function (select, filter, orderBy, groupBy, having, skip, take, options) {
        var _this = this;
        return CategoriesApiFp(this.configuration).groupByCategories(select, filter, orderBy, groupBy, having, skip, take, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Update multiple categories records
     * @param {CategoriesUpdateManyInput} categoriesUpdateManyInput
     * @param {CategoriesWhereInput} [filter]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CategoriesApi
     */
    CategoriesApi.prototype.updateCategories = function (categoriesUpdateManyInput, filter, options) {
        var _this = this;
        return CategoriesApiFp(this.configuration).updateCategories(categoriesUpdateManyInput, filter, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Update one categories record by id
     * @param {string} value
     * @param {CategoriesUpdateInput} categoriesUpdateInput
     * @param {CategoriesSelectInput} [select]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CategoriesApi
     */
    CategoriesApi.prototype.updateCategoriesById = function (value, categoriesUpdateInput, select, options) {
        var _this = this;
        return CategoriesApiFp(this.configuration).updateCategoriesById(value, categoriesUpdateInput, select, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return CategoriesApi;
}(BaseAPI));
export { CategoriesApi };
export var CategoriesApiService = new CategoriesApi(neureloConfig);
/**
 * UsersApi - axios parameter creator
 * @export
 */
export var UsersApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         * Aggregate by users
         * @param {UsersAggregateInput} select
         * @param {UsersWhereInput} [filter]
         * @param {Array<UsersOrderByWithRelationInput>} [orderBy]
         * @param {number} [skip]
         * @param {number} [take]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        aggregateByUsers: function (select, filter, orderBy, skip, take, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'select' is not null or undefined
                            assertParamExists('aggregateByUsers', 'select', select);
                            localVarPath = "/rest/users/__aggregate";
                            localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKey required
                            return [4 /*yield*/, setApiKeyToObject(localVarHeaderParameter, "X-API-KEY", configuration)];
                        case 1:
                            // authentication ApiKey required
                            _a.sent();
                            if (select !== undefined) {
                                localVarQueryParameter['select'] = select;
                            }
                            if (filter !== undefined) {
                                localVarQueryParameter['filter'] = filter;
                            }
                            if (orderBy) {
                                localVarQueryParameter['order_by'] = orderBy;
                            }
                            if (skip !== undefined) {
                                localVarQueryParameter['skip'] = skip;
                            }
                            if (take !== undefined) {
                                localVarQueryParameter['take'] = take;
                            }
                            setSearchParams(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: toPathString(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Create multiple users records
         * @param {Array<UsersCreateManyInput>} usersCreateManyInput
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createManyUsers: function (usersCreateManyInput, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'usersCreateManyInput' is not null or undefined
                            assertParamExists('createManyUsers', 'usersCreateManyInput', usersCreateManyInput);
                            localVarPath = "/rest/users";
                            localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKey required
                            return [4 /*yield*/, setApiKeyToObject(localVarHeaderParameter, "X-API-KEY", configuration)];
                        case 1:
                            // authentication ApiKey required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            setSearchParams(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = serializeDataIfNeeded(usersCreateManyInput, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: toPathString(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Create one users record
         * @param {UsersCreateInput} usersCreateInput
         * @param {UsersSelectInput} [select]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createOneUsers: function (usersCreateInput, select, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'usersCreateInput' is not null or undefined
                            assertParamExists('createOneUsers', 'usersCreateInput', usersCreateInput);
                            localVarPath = "/rest/users/__one";
                            localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKey required
                            return [4 /*yield*/, setApiKeyToObject(localVarHeaderParameter, "X-API-KEY", configuration)];
                        case 1:
                            // authentication ApiKey required
                            _a.sent();
                            if (select !== undefined) {
                                localVarQueryParameter['select'] = select;
                            }
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            setSearchParams(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = serializeDataIfNeeded(usersCreateInput, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: toPathString(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Delete multiple users records
         * @param {UsersWhereInput} [filter]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUsers: function (filter, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/rest/users";
                            localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKey required
                            return [4 /*yield*/, setApiKeyToObject(localVarHeaderParameter, "X-API-KEY", configuration)];
                        case 1:
                            // authentication ApiKey required
                            _a.sent();
                            if (filter !== undefined) {
                                localVarQueryParameter['filter'] = filter;
                            }
                            setSearchParams(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: toPathString(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Delete one users record by email
         * @param {string} value
         * @param {UsersSelectInput} [select]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUsersByEmail: function (value, select, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'value' is not null or undefined
                            assertParamExists('deleteUsersByEmail', 'value', value);
                            localVarPath = "/rest/users/email/{value}"
                                .replace("{".concat("value", "}"), String(value));
                            localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKey required
                            return [4 /*yield*/, setApiKeyToObject(localVarHeaderParameter, "X-API-KEY", configuration)];
                        case 1:
                            // authentication ApiKey required
                            _a.sent();
                            if (select !== undefined) {
                                localVarQueryParameter['select'] = select;
                            }
                            setSearchParams(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: toPathString(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Delete one users record by id
         * @param {string} value
         * @param {UsersSelectInput} [select]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUsersById: function (value, select, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'value' is not null or undefined
                            assertParamExists('deleteUsersById', 'value', value);
                            localVarPath = "/rest/users/{value}"
                                .replace("{".concat("value", "}"), String(value));
                            localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKey required
                            return [4 /*yield*/, setApiKeyToObject(localVarHeaderParameter, "X-API-KEY", configuration)];
                        case 1:
                            // authentication ApiKey required
                            _a.sent();
                            if (select !== undefined) {
                                localVarQueryParameter['select'] = select;
                            }
                            setSearchParams(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: toPathString(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Delete one users record by username
         * @param {string} value
         * @param {UsersSelectInput} [select]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUsersByUsername: function (value, select, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'value' is not null or undefined
                            assertParamExists('deleteUsersByUsername', 'value', value);
                            localVarPath = "/rest/users/username/{value}"
                                .replace("{".concat("value", "}"), String(value));
                            localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKey required
                            return [4 /*yield*/, setApiKeyToObject(localVarHeaderParameter, "X-API-KEY", configuration)];
                        case 1:
                            // authentication ApiKey required
                            _a.sent();
                            if (select !== undefined) {
                                localVarQueryParameter['select'] = select;
                            }
                            setSearchParams(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: toPathString(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Retrieve multiple users records
         * @param {UsersSelectInput} [select]
         * @param {UsersWhereInput} [filter]
         * @param {Array<UsersOrderByWithRelationInput>} [orderBy]
         * @param {number} [skip]
         * @param {number} [take]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findUsers: function (select, filter, orderBy, skip, take, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/rest/users";
                            localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKey required
                            return [4 /*yield*/, setApiKeyToObject(localVarHeaderParameter, "X-API-KEY", configuration)];
                        case 1:
                            // authentication ApiKey required
                            _a.sent();
                            if (select !== undefined) {
                                localVarQueryParameter['select'] = select;
                            }
                            if (filter !== undefined) {
                                localVarQueryParameter['filter'] = filter;
                            }
                            if (orderBy) {
                                localVarQueryParameter['order_by'] = orderBy;
                            }
                            if (skip !== undefined) {
                                localVarQueryParameter['skip'] = skip;
                            }
                            if (take !== undefined) {
                                localVarQueryParameter['take'] = take;
                            }
                            setSearchParams(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: toPathString(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Find one users record by email
         * @param {string} value
         * @param {UsersSelectInput} [select]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findUsersByEmail: function (value, select, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'value' is not null or undefined
                            assertParamExists('findUsersByEmail', 'value', value);
                            localVarPath = "/rest/users/email/{value}"
                                .replace("{".concat("value", "}"), String(value));
                            localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKey required
                            return [4 /*yield*/, setApiKeyToObject(localVarHeaderParameter, "X-API-KEY", configuration)];
                        case 1:
                            // authentication ApiKey required
                            _a.sent();
                            if (select !== undefined) {
                                localVarQueryParameter['select'] = select;
                            }
                            setSearchParams(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: toPathString(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Find one users record by id
         * @param {string} value
         * @param {UsersSelectInput} [select]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findUsersById: function (value, select, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'value' is not null or undefined
                            assertParamExists('findUsersById', 'value', value);
                            localVarPath = "/rest/users/{value}"
                                .replace("{".concat("value", "}"), String(value));
                            localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKey required
                            return [4 /*yield*/, setApiKeyToObject(localVarHeaderParameter, "X-API-KEY", configuration)];
                        case 1:
                            // authentication ApiKey required
                            _a.sent();
                            if (select !== undefined) {
                                localVarQueryParameter['select'] = select;
                            }
                            setSearchParams(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: toPathString(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Find one users record by username
         * @param {string} value
         * @param {UsersSelectInput} [select]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findUsersByUsername: function (value, select, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'value' is not null or undefined
                            assertParamExists('findUsersByUsername', 'value', value);
                            localVarPath = "/rest/users/username/{value}"
                                .replace("{".concat("value", "}"), String(value));
                            localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKey required
                            return [4 /*yield*/, setApiKeyToObject(localVarHeaderParameter, "X-API-KEY", configuration)];
                        case 1:
                            // authentication ApiKey required
                            _a.sent();
                            if (select !== undefined) {
                                localVarQueryParameter['select'] = select;
                            }
                            setSearchParams(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: toPathString(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Group by users
         * @param {UsersGroupByInput} select
         * @param {UsersWhereInput} [filter]
         * @param {Array<UsersOrderByWithAggregationInput>} [orderBy]
         * @param {Array<UsersScalarFieldEnum>} [groupBy]
         * @param {UsersScalarWhereWithAggregatesInput} [having]
         * @param {number} [skip]
         * @param {number} [take]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupByUsers: function (select, filter, orderBy, groupBy, having, skip, take, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'select' is not null or undefined
                            assertParamExists('groupByUsers', 'select', select);
                            localVarPath = "/rest/users/__groupBy";
                            localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKey required
                            return [4 /*yield*/, setApiKeyToObject(localVarHeaderParameter, "X-API-KEY", configuration)];
                        case 1:
                            // authentication ApiKey required
                            _a.sent();
                            if (select !== undefined) {
                                localVarQueryParameter['select'] = select;
                            }
                            if (filter !== undefined) {
                                localVarQueryParameter['filter'] = filter;
                            }
                            if (orderBy) {
                                localVarQueryParameter['order_by'] = orderBy;
                            }
                            if (groupBy) {
                                localVarQueryParameter['group_by'] = groupBy;
                            }
                            if (having !== undefined) {
                                localVarQueryParameter['having'] = having;
                            }
                            if (skip !== undefined) {
                                localVarQueryParameter['skip'] = skip;
                            }
                            if (take !== undefined) {
                                localVarQueryParameter['take'] = take;
                            }
                            setSearchParams(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: toPathString(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Update multiple users records
         * @param {UsersUpdateManyInput} usersUpdateManyInput
         * @param {UsersWhereInput} [filter]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUsers: function (usersUpdateManyInput, filter, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'usersUpdateManyInput' is not null or undefined
                            assertParamExists('updateUsers', 'usersUpdateManyInput', usersUpdateManyInput);
                            localVarPath = "/rest/users";
                            localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'PATCH' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKey required
                            return [4 /*yield*/, setApiKeyToObject(localVarHeaderParameter, "X-API-KEY", configuration)];
                        case 1:
                            // authentication ApiKey required
                            _a.sent();
                            if (filter !== undefined) {
                                localVarQueryParameter['filter'] = filter;
                            }
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            setSearchParams(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = serializeDataIfNeeded(usersUpdateManyInput, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: toPathString(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Update one users record by email
         * @param {string} value
         * @param {UsersUpdateInput} usersUpdateInput
         * @param {UsersSelectInput} [select]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUsersByEmail: function (value, usersUpdateInput, select, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'value' is not null or undefined
                            assertParamExists('updateUsersByEmail', 'value', value);
                            // verify required parameter 'usersUpdateInput' is not null or undefined
                            assertParamExists('updateUsersByEmail', 'usersUpdateInput', usersUpdateInput);
                            localVarPath = "/rest/users/email/{value}"
                                .replace("{".concat("value", "}"), String(value));
                            localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'PATCH' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKey required
                            return [4 /*yield*/, setApiKeyToObject(localVarHeaderParameter, "X-API-KEY", configuration)];
                        case 1:
                            // authentication ApiKey required
                            _a.sent();
                            if (select !== undefined) {
                                localVarQueryParameter['select'] = select;
                            }
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            setSearchParams(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = serializeDataIfNeeded(usersUpdateInput, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: toPathString(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Update one users record by id
         * @param {string} value
         * @param {UsersUpdateInput} usersUpdateInput
         * @param {UsersSelectInput} [select]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUsersById: function (value, usersUpdateInput, select, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'value' is not null or undefined
                            assertParamExists('updateUsersById', 'value', value);
                            // verify required parameter 'usersUpdateInput' is not null or undefined
                            assertParamExists('updateUsersById', 'usersUpdateInput', usersUpdateInput);
                            localVarPath = "/rest/users/{value}"
                                .replace("{".concat("value", "}"), String(value));
                            localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'PATCH' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKey required
                            return [4 /*yield*/, setApiKeyToObject(localVarHeaderParameter, "X-API-KEY", configuration)];
                        case 1:
                            // authentication ApiKey required
                            _a.sent();
                            if (select !== undefined) {
                                localVarQueryParameter['select'] = select;
                            }
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            setSearchParams(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = serializeDataIfNeeded(usersUpdateInput, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: toPathString(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Update one users record by username
         * @param {string} value
         * @param {UsersUpdateInput} usersUpdateInput
         * @param {UsersSelectInput} [select]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUsersByUsername: function (value, usersUpdateInput, select, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'value' is not null or undefined
                            assertParamExists('updateUsersByUsername', 'value', value);
                            // verify required parameter 'usersUpdateInput' is not null or undefined
                            assertParamExists('updateUsersByUsername', 'usersUpdateInput', usersUpdateInput);
                            localVarPath = "/rest/users/username/{value}"
                                .replace("{".concat("value", "}"), String(value));
                            localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'PATCH' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKey required
                            return [4 /*yield*/, setApiKeyToObject(localVarHeaderParameter, "X-API-KEY", configuration)];
                        case 1:
                            // authentication ApiKey required
                            _a.sent();
                            if (select !== undefined) {
                                localVarQueryParameter['select'] = select;
                            }
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            setSearchParams(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = serializeDataIfNeeded(usersUpdateInput, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: toPathString(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
    };
};
/**
 * UsersApi - functional programming interface
 * @export
 */
export var UsersApiFp = function (configuration) {
    var localVarAxiosParamCreator = UsersApiAxiosParamCreator(configuration);
    return {
        /**
         * Aggregate by users
         * @param {UsersAggregateInput} select
         * @param {UsersWhereInput} [filter]
         * @param {Array<UsersOrderByWithRelationInput>} [orderBy]
         * @param {number} [skip]
         * @param {number} [take]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        aggregateByUsers: function (select, filter, orderBy, skip, take, options) {
            var _a, _b, _c;
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.aggregateByUsers(select, filter, orderBy, skip, take, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = operationServerMap['UsersApi.aggregateByUsers']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * Create multiple users records
         * @param {Array<UsersCreateManyInput>} usersCreateManyInput
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createManyUsers: function (usersCreateManyInput, options) {
            var _a, _b, _c;
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.createManyUsers(usersCreateManyInput, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = operationServerMap['UsersApi.createManyUsers']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * Create one users record
         * @param {UsersCreateInput} usersCreateInput
         * @param {UsersSelectInput} [select]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createOneUsers: function (usersCreateInput, select, options) {
            var _a, _b, _c;
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.createOneUsers(usersCreateInput, select, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = operationServerMap['UsersApi.createOneUsers']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * Delete multiple users records
         * @param {UsersWhereInput} [filter]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUsers: function (filter, options) {
            var _a, _b, _c;
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.deleteUsers(filter, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = operationServerMap['UsersApi.deleteUsers']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * Delete one users record by email
         * @param {string} value
         * @param {UsersSelectInput} [select]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUsersByEmail: function (value, select, options) {
            var _a, _b, _c;
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.deleteUsersByEmail(value, select, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = operationServerMap['UsersApi.deleteUsersByEmail']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * Delete one users record by id
         * @param {string} value
         * @param {UsersSelectInput} [select]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUsersById: function (value, select, options) {
            var _a, _b, _c;
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.deleteUsersById(value, select, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = operationServerMap['UsersApi.deleteUsersById']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * Delete one users record by username
         * @param {string} value
         * @param {UsersSelectInput} [select]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUsersByUsername: function (value, select, options) {
            var _a, _b, _c;
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.deleteUsersByUsername(value, select, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = operationServerMap['UsersApi.deleteUsersByUsername']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * Retrieve multiple users records
         * @param {UsersSelectInput} [select]
         * @param {UsersWhereInput} [filter]
         * @param {Array<UsersOrderByWithRelationInput>} [orderBy]
         * @param {number} [skip]
         * @param {number} [take]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findUsers: function (select, filter, orderBy, skip, take, options) {
            var _a, _b, _c;
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.findUsers(select, filter, orderBy, skip, take, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = operationServerMap['UsersApi.findUsers']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * Find one users record by email
         * @param {string} value
         * @param {UsersSelectInput} [select]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findUsersByEmail: function (value, select, options) {
            var _a, _b, _c;
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.findUsersByEmail(value, select, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = operationServerMap['UsersApi.findUsersByEmail']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * Find one users record by id
         * @param {string} value
         * @param {UsersSelectInput} [select]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findUsersById: function (value, select, options) {
            var _a, _b, _c;
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.findUsersById(value, select, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = operationServerMap['UsersApi.findUsersById']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * Find one users record by username
         * @param {string} value
         * @param {UsersSelectInput} [select]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findUsersByUsername: function (value, select, options) {
            var _a, _b, _c;
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.findUsersByUsername(value, select, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = operationServerMap['UsersApi.findUsersByUsername']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * Group by users
         * @param {UsersGroupByInput} select
         * @param {UsersWhereInput} [filter]
         * @param {Array<UsersOrderByWithAggregationInput>} [orderBy]
         * @param {Array<UsersScalarFieldEnum>} [groupBy]
         * @param {UsersScalarWhereWithAggregatesInput} [having]
         * @param {number} [skip]
         * @param {number} [take]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupByUsers: function (select, filter, orderBy, groupBy, having, skip, take, options) {
            var _a, _b, _c;
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.groupByUsers(select, filter, orderBy, groupBy, having, skip, take, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = operationServerMap['UsersApi.groupByUsers']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * Update multiple users records
         * @param {UsersUpdateManyInput} usersUpdateManyInput
         * @param {UsersWhereInput} [filter]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUsers: function (usersUpdateManyInput, filter, options) {
            var _a, _b, _c;
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.updateUsers(usersUpdateManyInput, filter, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = operationServerMap['UsersApi.updateUsers']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * Update one users record by email
         * @param {string} value
         * @param {UsersUpdateInput} usersUpdateInput
         * @param {UsersSelectInput} [select]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUsersByEmail: function (value, usersUpdateInput, select, options) {
            var _a, _b, _c;
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.updateUsersByEmail(value, usersUpdateInput, select, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = operationServerMap['UsersApi.updateUsersByEmail']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * Update one users record by id
         * @param {string} value
         * @param {UsersUpdateInput} usersUpdateInput
         * @param {UsersSelectInput} [select]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUsersById: function (value, usersUpdateInput, select, options) {
            var _a, _b, _c;
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.updateUsersById(value, usersUpdateInput, select, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = operationServerMap['UsersApi.updateUsersById']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * Update one users record by username
         * @param {string} value
         * @param {UsersUpdateInput} usersUpdateInput
         * @param {UsersSelectInput} [select]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUsersByUsername: function (value, usersUpdateInput, select, options) {
            var _a, _b, _c;
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.updateUsersByUsername(value, usersUpdateInput, select, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = operationServerMap['UsersApi.updateUsersByUsername']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
    };
};
/**
 * UsersApi - factory interface
 * @export
 */
export var UsersApiFactory = function (configuration, basePath, axios) {
    var localVarFp = UsersApiFp(configuration);
    return {
        /**
         * Aggregate by users
         * @param {UsersAggregateInput} select
         * @param {UsersWhereInput} [filter]
         * @param {Array<UsersOrderByWithRelationInput>} [orderBy]
         * @param {number} [skip]
         * @param {number} [take]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        aggregateByUsers: function (select, filter, orderBy, skip, take, options) {
            return localVarFp.aggregateByUsers(select, filter, orderBy, skip, take, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Create multiple users records
         * @param {Array<UsersCreateManyInput>} usersCreateManyInput
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createManyUsers: function (usersCreateManyInput, options) {
            return localVarFp.createManyUsers(usersCreateManyInput, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Create one users record
         * @param {UsersCreateInput} usersCreateInput
         * @param {UsersSelectInput} [select]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createOneUsers: function (usersCreateInput, select, options) {
            return localVarFp.createOneUsers(usersCreateInput, select, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Delete multiple users records
         * @param {UsersWhereInput} [filter]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUsers: function (filter, options) {
            return localVarFp.deleteUsers(filter, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Delete one users record by email
         * @param {string} value
         * @param {UsersSelectInput} [select]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUsersByEmail: function (value, select, options) {
            return localVarFp.deleteUsersByEmail(value, select, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Delete one users record by id
         * @param {string} value
         * @param {UsersSelectInput} [select]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUsersById: function (value, select, options) {
            return localVarFp.deleteUsersById(value, select, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Delete one users record by username
         * @param {string} value
         * @param {UsersSelectInput} [select]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUsersByUsername: function (value, select, options) {
            return localVarFp.deleteUsersByUsername(value, select, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Retrieve multiple users records
         * @param {UsersSelectInput} [select]
         * @param {UsersWhereInput} [filter]
         * @param {Array<UsersOrderByWithRelationInput>} [orderBy]
         * @param {number} [skip]
         * @param {number} [take]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findUsers: function (select, filter, orderBy, skip, take, options) {
            return localVarFp.findUsers(select, filter, orderBy, skip, take, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Find one users record by email
         * @param {string} value
         * @param {UsersSelectInput} [select]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findUsersByEmail: function (value, select, options) {
            return localVarFp.findUsersByEmail(value, select, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Find one users record by id
         * @param {string} value
         * @param {UsersSelectInput} [select]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findUsersById: function (value, select, options) {
            return localVarFp.findUsersById(value, select, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Find one users record by username
         * @param {string} value
         * @param {UsersSelectInput} [select]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findUsersByUsername: function (value, select, options) {
            return localVarFp.findUsersByUsername(value, select, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Group by users
         * @param {UsersGroupByInput} select
         * @param {UsersWhereInput} [filter]
         * @param {Array<UsersOrderByWithAggregationInput>} [orderBy]
         * @param {Array<UsersScalarFieldEnum>} [groupBy]
         * @param {UsersScalarWhereWithAggregatesInput} [having]
         * @param {number} [skip]
         * @param {number} [take]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupByUsers: function (select, filter, orderBy, groupBy, having, skip, take, options) {
            return localVarFp.groupByUsers(select, filter, orderBy, groupBy, having, skip, take, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Update multiple users records
         * @param {UsersUpdateManyInput} usersUpdateManyInput
         * @param {UsersWhereInput} [filter]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUsers: function (usersUpdateManyInput, filter, options) {
            return localVarFp.updateUsers(usersUpdateManyInput, filter, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Update one users record by email
         * @param {string} value
         * @param {UsersUpdateInput} usersUpdateInput
         * @param {UsersSelectInput} [select]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUsersByEmail: function (value, usersUpdateInput, select, options) {
            return localVarFp.updateUsersByEmail(value, usersUpdateInput, select, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Update one users record by id
         * @param {string} value
         * @param {UsersUpdateInput} usersUpdateInput
         * @param {UsersSelectInput} [select]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUsersById: function (value, usersUpdateInput, select, options) {
            return localVarFp.updateUsersById(value, usersUpdateInput, select, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Update one users record by username
         * @param {string} value
         * @param {UsersUpdateInput} usersUpdateInput
         * @param {UsersSelectInput} [select]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUsersByUsername: function (value, usersUpdateInput, select, options) {
            return localVarFp.updateUsersByUsername(value, usersUpdateInput, select, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
/**
 * UsersApi - object-oriented interface
 * @export
 * @class UsersApi
 * @extends {BaseAPI}
 */
var UsersApi = /** @class */ (function (_super) {
    __extends(UsersApi, _super);
    function UsersApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Aggregate by users
     * @param {UsersAggregateInput} select
     * @param {UsersWhereInput} [filter]
     * @param {Array<UsersOrderByWithRelationInput>} [orderBy]
     * @param {number} [skip]
     * @param {number} [take]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    UsersApi.prototype.aggregateByUsers = function (select, filter, orderBy, skip, take, options) {
        var _this = this;
        return UsersApiFp(this.configuration).aggregateByUsers(select, filter, orderBy, skip, take, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Create multiple users records
     * @param {Array<UsersCreateManyInput>} usersCreateManyInput
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    UsersApi.prototype.createManyUsers = function (usersCreateManyInput, options) {
        var _this = this;
        return UsersApiFp(this.configuration).createManyUsers(usersCreateManyInput, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Create one users record
     * @param {UsersCreateInput} usersCreateInput
     * @param {UsersSelectInput} [select]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    UsersApi.prototype.createOneUsers = function (usersCreateInput, select, options) {
        var _this = this;
        return UsersApiFp(this.configuration).createOneUsers(usersCreateInput, select, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Delete multiple users records
     * @param {UsersWhereInput} [filter]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    UsersApi.prototype.deleteUsers = function (filter, options) {
        var _this = this;
        return UsersApiFp(this.configuration).deleteUsers(filter, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Delete one users record by email
     * @param {string} value
     * @param {UsersSelectInput} [select]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    UsersApi.prototype.deleteUsersByEmail = function (value, select, options) {
        var _this = this;
        return UsersApiFp(this.configuration).deleteUsersByEmail(value, select, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Delete one users record by id
     * @param {string} value
     * @param {UsersSelectInput} [select]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    UsersApi.prototype.deleteUsersById = function (value, select, options) {
        var _this = this;
        return UsersApiFp(this.configuration).deleteUsersById(value, select, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Delete one users record by username
     * @param {string} value
     * @param {UsersSelectInput} [select]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    UsersApi.prototype.deleteUsersByUsername = function (value, select, options) {
        var _this = this;
        return UsersApiFp(this.configuration).deleteUsersByUsername(value, select, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Retrieve multiple users records
     * @param {UsersSelectInput} [select]
     * @param {UsersWhereInput} [filter]
     * @param {Array<UsersOrderByWithRelationInput>} [orderBy]
     * @param {number} [skip]
     * @param {number} [take]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    UsersApi.prototype.findUsers = function (select, filter, orderBy, skip, take, options) {
        var _this = this;
        return UsersApiFp(this.configuration).findUsers(select, filter, orderBy, skip, take, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Find one users record by email
     * @param {string} value
     * @param {UsersSelectInput} [select]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    UsersApi.prototype.findUsersByEmail = function (value, select, options) {
        var _this = this;
        return UsersApiFp(this.configuration).findUsersByEmail(value, select, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Find one users record by id
     * @param {string} value
     * @param {UsersSelectInput} [select]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    UsersApi.prototype.findUsersById = function (value, select, options) {
        var _this = this;
        return UsersApiFp(this.configuration).findUsersById(value, select, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Find one users record by username
     * @param {string} value
     * @param {UsersSelectInput} [select]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    UsersApi.prototype.findUsersByUsername = function (value, select, options) {
        var _this = this;
        return UsersApiFp(this.configuration).findUsersByUsername(value, select, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Group by users
     * @param {UsersGroupByInput} select
     * @param {UsersWhereInput} [filter]
     * @param {Array<UsersOrderByWithAggregationInput>} [orderBy]
     * @param {Array<UsersScalarFieldEnum>} [groupBy]
     * @param {UsersScalarWhereWithAggregatesInput} [having]
     * @param {number} [skip]
     * @param {number} [take]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    UsersApi.prototype.groupByUsers = function (select, filter, orderBy, groupBy, having, skip, take, options) {
        var _this = this;
        return UsersApiFp(this.configuration).groupByUsers(select, filter, orderBy, groupBy, having, skip, take, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Update multiple users records
     * @param {UsersUpdateManyInput} usersUpdateManyInput
     * @param {UsersWhereInput} [filter]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    UsersApi.prototype.updateUsers = function (usersUpdateManyInput, filter, options) {
        var _this = this;
        return UsersApiFp(this.configuration).updateUsers(usersUpdateManyInput, filter, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Update one users record by email
     * @param {string} value
     * @param {UsersUpdateInput} usersUpdateInput
     * @param {UsersSelectInput} [select]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    UsersApi.prototype.updateUsersByEmail = function (value, usersUpdateInput, select, options) {
        var _this = this;
        return UsersApiFp(this.configuration).updateUsersByEmail(value, usersUpdateInput, select, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Update one users record by id
     * @param {string} value
     * @param {UsersUpdateInput} usersUpdateInput
     * @param {UsersSelectInput} [select]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    UsersApi.prototype.updateUsersById = function (value, usersUpdateInput, select, options) {
        var _this = this;
        return UsersApiFp(this.configuration).updateUsersById(value, usersUpdateInput, select, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Update one users record by username
     * @param {string} value
     * @param {UsersUpdateInput} usersUpdateInput
     * @param {UsersSelectInput} [select]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    UsersApi.prototype.updateUsersByUsername = function (value, usersUpdateInput, select, options) {
        var _this = this;
        return UsersApiFp(this.configuration).updateUsersByUsername(value, usersUpdateInput, select, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return UsersApi;
}(BaseAPI));
export { UsersApi };
export var UsersApiService = new UsersApi(neureloConfig);
