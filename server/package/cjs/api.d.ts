/**
 * Neurelo API Spec
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { type Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import type { RequestArgs } from './base';
import { BaseAPI } from './base';
/**
 *
 * @export
 * @interface AffectedRowsOutput
 */
export interface AffectedRowsOutput {
    /**
     *
     * @type {number}
     * @memberof AffectedRowsOutput
     */
    'count'?: number;
}
/**
 *
 * @export
 * @interface AggregateByCategories200Response
 */
export interface AggregateByCategories200Response {
    /**
     *
     * @type {AggregateCategories}
     * @memberof AggregateByCategories200Response
     */
    'data': AggregateCategories;
}
/**
 *
 * @export
 * @interface AggregateByUsers200Response
 */
export interface AggregateByUsers200Response {
    /**
     *
     * @type {AggregateUsers}
     * @memberof AggregateByUsers200Response
     */
    'data': AggregateUsers;
}
/**
 *
 * @export
 * @interface AggregateCategories
 */
export interface AggregateCategories {
    /**
     *
     * @type {CategoriesCountAggregateOutputType}
     * @memberof AggregateCategories
     */
    '_count'?: CategoriesCountAggregateOutputType;
    /**
     *
     * @type {CategoriesMaxAggregateOutputType}
     * @memberof AggregateCategories
     */
    '_max'?: CategoriesMaxAggregateOutputType;
    /**
     *
     * @type {CategoriesMinAggregateOutputType}
     * @memberof AggregateCategories
     */
    '_min'?: CategoriesMinAggregateOutputType;
}
/**
 *
 * @export
 * @interface AggregateUsers
 */
export interface AggregateUsers {
    /**
     *
     * @type {UsersCountAggregateOutputType}
     * @memberof AggregateUsers
     */
    '_count'?: UsersCountAggregateOutputType;
    /**
     *
     * @type {UsersMaxAggregateOutputType}
     * @memberof AggregateUsers
     */
    '_max'?: UsersMaxAggregateOutputType;
    /**
     *
     * @type {UsersMinAggregateOutputType}
     * @memberof AggregateUsers
     */
    '_min'?: UsersMinAggregateOutputType;
}
/**
 *
 * @export
 * @interface Categories
 */
export interface Categories {
    /**
     *
     * @type {string}
     * @memberof Categories
     */
    'categoryName'?: string;
    /**
     *
     * @type {string}
     * @memberof Categories
     */
    'createdAt'?: string;
    /**
     *
     * @type {string}
     * @memberof Categories
     */
    'id'?: string;
    /**
     *
     * @type {string}
     * @memberof Categories
     */
    'updatedAt'?: string;
}
/**
 *
 * @export
 * @interface CategoriesAggregateInput
 */
export interface CategoriesAggregateInput {
    /**
     *
     * @type {Array<string>}
     * @memberof CategoriesAggregateInput
     */
    '_count'?: Array<CategoriesAggregateInputCountEnum>;
    /**
     *
     * @type {Array<string>}
     * @memberof CategoriesAggregateInput
     */
    '_max'?: Array<CategoriesAggregateInputMaxEnum>;
    /**
     *
     * @type {Array<string>}
     * @memberof CategoriesAggregateInput
     */
    '_min'?: Array<CategoriesAggregateInputMinEnum>;
}
export declare const CategoriesAggregateInputCountEnum: {
    readonly All: "_all";
    readonly CategoryName: "categoryName";
    readonly CreatedAt: "createdAt";
    readonly Id: "id";
    readonly UpdatedAt: "updatedAt";
};
export type CategoriesAggregateInputCountEnum = typeof CategoriesAggregateInputCountEnum[keyof typeof CategoriesAggregateInputCountEnum];
export declare const CategoriesAggregateInputMaxEnum: {
    readonly CategoryName: "categoryName";
    readonly CreatedAt: "createdAt";
    readonly Id: "id";
    readonly UpdatedAt: "updatedAt";
};
export type CategoriesAggregateInputMaxEnum = typeof CategoriesAggregateInputMaxEnum[keyof typeof CategoriesAggregateInputMaxEnum];
export declare const CategoriesAggregateInputMinEnum: {
    readonly CategoryName: "categoryName";
    readonly CreatedAt: "createdAt";
    readonly Id: "id";
    readonly UpdatedAt: "updatedAt";
};
export type CategoriesAggregateInputMinEnum = typeof CategoriesAggregateInputMinEnum[keyof typeof CategoriesAggregateInputMinEnum];
/**
 *
 * @export
 * @interface CategoriesCountAggregateOutputType
 */
export interface CategoriesCountAggregateOutputType {
    /**
     *
     * @type {number}
     * @memberof CategoriesCountAggregateOutputType
     */
    '_all'?: number;
    /**
     *
     * @type {number}
     * @memberof CategoriesCountAggregateOutputType
     */
    'categoryName'?: number;
    /**
     *
     * @type {number}
     * @memberof CategoriesCountAggregateOutputType
     */
    'createdAt'?: number;
    /**
     *
     * @type {number}
     * @memberof CategoriesCountAggregateOutputType
     */
    'id'?: number;
    /**
     *
     * @type {number}
     * @memberof CategoriesCountAggregateOutputType
     */
    'updatedAt'?: number;
}
/**
 *
 * @export
 * @interface CategoriesCountOrderByAggregateInput
 */
export interface CategoriesCountOrderByAggregateInput {
    /**
     *
     * @type {SortOrder}
     * @memberof CategoriesCountOrderByAggregateInput
     */
    'categoryName'?: SortOrder;
    /**
     *
     * @type {SortOrder}
     * @memberof CategoriesCountOrderByAggregateInput
     */
    'createdAt'?: SortOrder;
    /**
     *
     * @type {SortOrder}
     * @memberof CategoriesCountOrderByAggregateInput
     */
    'id'?: SortOrder;
    /**
     *
     * @type {SortOrder}
     * @memberof CategoriesCountOrderByAggregateInput
     */
    'updatedAt'?: SortOrder;
}
/**
 *
 * @export
 * @interface CategoriesCreateInput
 */
export interface CategoriesCreateInput {
    /**
     *
     * @type {string}
     * @memberof CategoriesCreateInput
     */
    'categoryName': string;
    /**
     *
     * @type {string}
     * @memberof CategoriesCreateInput
     */
    'createdAt'?: string;
    /**
     *
     * @type {string}
     * @memberof CategoriesCreateInput
     */
    'id'?: string;
    /**
     *
     * @type {string}
     * @memberof CategoriesCreateInput
     */
    'updatedAt'?: string;
}
/**
 *
 * @export
 * @interface CategoriesCreateManyInput
 */
export interface CategoriesCreateManyInput {
    /**
     *
     * @type {string}
     * @memberof CategoriesCreateManyInput
     */
    'categoryName': string;
    /**
     *
     * @type {string}
     * @memberof CategoriesCreateManyInput
     */
    'createdAt'?: string;
    /**
     *
     * @type {string}
     * @memberof CategoriesCreateManyInput
     */
    'id'?: string;
    /**
     *
     * @type {string}
     * @memberof CategoriesCreateManyInput
     */
    'updatedAt'?: string;
}
/**
 *
 * @export
 * @interface CategoriesGroupByInput
 */
export interface CategoriesGroupByInput {
    /**
     *
     * @type {Array<string>}
     * @memberof CategoriesGroupByInput
     */
    '_count'?: Array<CategoriesGroupByInputCountEnum>;
    /**
     *
     * @type {Array<string>}
     * @memberof CategoriesGroupByInput
     */
    '_max'?: Array<CategoriesGroupByInputMaxEnum>;
    /**
     *
     * @type {Array<string>}
     * @memberof CategoriesGroupByInput
     */
    '_min'?: Array<CategoriesGroupByInputMinEnum>;
    /**
     *
     * @type {boolean}
     * @memberof CategoriesGroupByInput
     */
    'categoryName'?: boolean;
    /**
     *
     * @type {boolean}
     * @memberof CategoriesGroupByInput
     */
    'createdAt'?: boolean;
    /**
     *
     * @type {boolean}
     * @memberof CategoriesGroupByInput
     */
    'id'?: boolean;
    /**
     *
     * @type {boolean}
     * @memberof CategoriesGroupByInput
     */
    'updatedAt'?: boolean;
}
export declare const CategoriesGroupByInputCountEnum: {
    readonly All: "_all";
    readonly CategoryName: "categoryName";
    readonly CreatedAt: "createdAt";
    readonly Id: "id";
    readonly UpdatedAt: "updatedAt";
};
export type CategoriesGroupByInputCountEnum = typeof CategoriesGroupByInputCountEnum[keyof typeof CategoriesGroupByInputCountEnum];
export declare const CategoriesGroupByInputMaxEnum: {
    readonly CategoryName: "categoryName";
    readonly CreatedAt: "createdAt";
    readonly Id: "id";
    readonly UpdatedAt: "updatedAt";
};
export type CategoriesGroupByInputMaxEnum = typeof CategoriesGroupByInputMaxEnum[keyof typeof CategoriesGroupByInputMaxEnum];
export declare const CategoriesGroupByInputMinEnum: {
    readonly CategoryName: "categoryName";
    readonly CreatedAt: "createdAt";
    readonly Id: "id";
    readonly UpdatedAt: "updatedAt";
};
export type CategoriesGroupByInputMinEnum = typeof CategoriesGroupByInputMinEnum[keyof typeof CategoriesGroupByInputMinEnum];
/**
 *
 * @export
 * @interface CategoriesGroupByOutputType
 */
export interface CategoriesGroupByOutputType {
    /**
     *
     * @type {CategoriesCountAggregateOutputType}
     * @memberof CategoriesGroupByOutputType
     */
    '_count'?: CategoriesCountAggregateOutputType;
    /**
     *
     * @type {CategoriesMaxAggregateOutputType}
     * @memberof CategoriesGroupByOutputType
     */
    '_max'?: CategoriesMaxAggregateOutputType;
    /**
     *
     * @type {CategoriesMinAggregateOutputType}
     * @memberof CategoriesGroupByOutputType
     */
    '_min'?: CategoriesMinAggregateOutputType;
    /**
     *
     * @type {string}
     * @memberof CategoriesGroupByOutputType
     */
    'categoryName'?: string;
    /**
     *
     * @type {string}
     * @memberof CategoriesGroupByOutputType
     */
    'createdAt'?: string;
    /**
     *
     * @type {string}
     * @memberof CategoriesGroupByOutputType
     */
    'id'?: string;
    /**
     *
     * @type {string}
     * @memberof CategoriesGroupByOutputType
     */
    'updatedAt'?: string;
}
/**
 *
 * @export
 * @interface CategoriesMaxAggregateOutputType
 */
export interface CategoriesMaxAggregateOutputType {
    /**
     *
     * @type {string}
     * @memberof CategoriesMaxAggregateOutputType
     */
    'categoryName'?: string | null;
    /**
     *
     * @type {string}
     * @memberof CategoriesMaxAggregateOutputType
     */
    'createdAt'?: string | null;
    /**
     *
     * @type {string}
     * @memberof CategoriesMaxAggregateOutputType
     */
    'id'?: string | null;
    /**
     *
     * @type {string}
     * @memberof CategoriesMaxAggregateOutputType
     */
    'updatedAt'?: string | null;
}
/**
 *
 * @export
 * @interface CategoriesMaxOrderByAggregateInput
 */
export interface CategoriesMaxOrderByAggregateInput {
    /**
     *
     * @type {SortOrder}
     * @memberof CategoriesMaxOrderByAggregateInput
     */
    'categoryName'?: SortOrder;
    /**
     *
     * @type {SortOrder}
     * @memberof CategoriesMaxOrderByAggregateInput
     */
    'createdAt'?: SortOrder;
    /**
     *
     * @type {SortOrder}
     * @memberof CategoriesMaxOrderByAggregateInput
     */
    'id'?: SortOrder;
    /**
     *
     * @type {SortOrder}
     * @memberof CategoriesMaxOrderByAggregateInput
     */
    'updatedAt'?: SortOrder;
}
/**
 *
 * @export
 * @interface CategoriesMinAggregateOutputType
 */
export interface CategoriesMinAggregateOutputType {
    /**
     *
     * @type {string}
     * @memberof CategoriesMinAggregateOutputType
     */
    'categoryName'?: string | null;
    /**
     *
     * @type {string}
     * @memberof CategoriesMinAggregateOutputType
     */
    'createdAt'?: string | null;
    /**
     *
     * @type {string}
     * @memberof CategoriesMinAggregateOutputType
     */
    'id'?: string | null;
    /**
     *
     * @type {string}
     * @memberof CategoriesMinAggregateOutputType
     */
    'updatedAt'?: string | null;
}
/**
 *
 * @export
 * @interface CategoriesMinOrderByAggregateInput
 */
export interface CategoriesMinOrderByAggregateInput {
    /**
     *
     * @type {SortOrder}
     * @memberof CategoriesMinOrderByAggregateInput
     */
    'categoryName'?: SortOrder;
    /**
     *
     * @type {SortOrder}
     * @memberof CategoriesMinOrderByAggregateInput
     */
    'createdAt'?: SortOrder;
    /**
     *
     * @type {SortOrder}
     * @memberof CategoriesMinOrderByAggregateInput
     */
    'id'?: SortOrder;
    /**
     *
     * @type {SortOrder}
     * @memberof CategoriesMinOrderByAggregateInput
     */
    'updatedAt'?: SortOrder;
}
/**
 *
 * @export
 * @interface CategoriesOrderByWithAggregationInput
 */
export interface CategoriesOrderByWithAggregationInput {
    /**
     *
     * @type {CategoriesCountOrderByAggregateInput}
     * @memberof CategoriesOrderByWithAggregationInput
     */
    '_count'?: CategoriesCountOrderByAggregateInput;
    /**
     *
     * @type {CategoriesMaxOrderByAggregateInput}
     * @memberof CategoriesOrderByWithAggregationInput
     */
    '_max'?: CategoriesMaxOrderByAggregateInput;
    /**
     *
     * @type {CategoriesMinOrderByAggregateInput}
     * @memberof CategoriesOrderByWithAggregationInput
     */
    '_min'?: CategoriesMinOrderByAggregateInput;
    /**
     *
     * @type {SortOrder}
     * @memberof CategoriesOrderByWithAggregationInput
     */
    'categoryName'?: SortOrder;
    /**
     *
     * @type {SortOrder}
     * @memberof CategoriesOrderByWithAggregationInput
     */
    'createdAt'?: SortOrder;
    /**
     *
     * @type {SortOrder}
     * @memberof CategoriesOrderByWithAggregationInput
     */
    'id'?: SortOrder;
    /**
     *
     * @type {SortOrder}
     * @memberof CategoriesOrderByWithAggregationInput
     */
    'updatedAt'?: SortOrder;
}
/**
 *
 * @export
 * @interface CategoriesOrderByWithRelationInput
 */
export interface CategoriesOrderByWithRelationInput {
    /**
     *
     * @type {SortOrder}
     * @memberof CategoriesOrderByWithRelationInput
     */
    'categoryName'?: SortOrder;
    /**
     *
     * @type {SortOrder}
     * @memberof CategoriesOrderByWithRelationInput
     */
    'createdAt'?: SortOrder;
    /**
     *
     * @type {SortOrder}
     * @memberof CategoriesOrderByWithRelationInput
     */
    'id'?: SortOrder;
    /**
     *
     * @type {SortOrder}
     * @memberof CategoriesOrderByWithRelationInput
     */
    'updatedAt'?: SortOrder;
}
/**
 *
 * @export
 * @enum {string}
 */
export declare const CategoriesScalarFieldEnum: {
    readonly CategoryName: "categoryName";
    readonly CreatedAt: "createdAt";
    readonly Id: "id";
    readonly UpdatedAt: "updatedAt";
};
export type CategoriesScalarFieldEnum = typeof CategoriesScalarFieldEnum[keyof typeof CategoriesScalarFieldEnum];
/**
 *
 * @export
 * @interface CategoriesScalarWhereWithAggregatesInput
 */
export interface CategoriesScalarWhereWithAggregatesInput {
    /**
     *
     * @type {CategoriesScalarWhereWithAggregatesInputAND}
     * @memberof CategoriesScalarWhereWithAggregatesInput
     */
    'AND'?: CategoriesScalarWhereWithAggregatesInputAND;
    /**
     *
     * @type {CategoriesScalarWhereWithAggregatesInputAND}
     * @memberof CategoriesScalarWhereWithAggregatesInput
     */
    'NOT'?: CategoriesScalarWhereWithAggregatesInputAND;
    /**
     *
     * @type {Array<CategoriesScalarWhereWithAggregatesInput>}
     * @memberof CategoriesScalarWhereWithAggregatesInput
     */
    'OR'?: Array<CategoriesScalarWhereWithAggregatesInput>;
    /**
     *
     * @type {CategoriesScalarWhereWithAggregatesInputCategoryName}
     * @memberof CategoriesScalarWhereWithAggregatesInput
     */
    'categoryName'?: CategoriesScalarWhereWithAggregatesInputCategoryName;
    /**
     *
     * @type {CategoriesScalarWhereWithAggregatesInputCreatedAt}
     * @memberof CategoriesScalarWhereWithAggregatesInput
     */
    'createdAt'?: CategoriesScalarWhereWithAggregatesInputCreatedAt;
    /**
     *
     * @type {CategoriesScalarWhereWithAggregatesInputCategoryName}
     * @memberof CategoriesScalarWhereWithAggregatesInput
     */
    'id'?: CategoriesScalarWhereWithAggregatesInputCategoryName;
    /**
     *
     * @type {CategoriesScalarWhereWithAggregatesInputCreatedAt}
     * @memberof CategoriesScalarWhereWithAggregatesInput
     */
    'updatedAt'?: CategoriesScalarWhereWithAggregatesInputCreatedAt;
}
/**
 * @type CategoriesScalarWhereWithAggregatesInputAND
 * @export
 */
export type CategoriesScalarWhereWithAggregatesInputAND = Array<CategoriesScalarWhereWithAggregatesInput> | CategoriesScalarWhereWithAggregatesInput;
/**
 * @type CategoriesScalarWhereWithAggregatesInputCategoryName
 * @export
 */
export type CategoriesScalarWhereWithAggregatesInputCategoryName = StringWithAggregatesFilter | string;
/**
 * @type CategoriesScalarWhereWithAggregatesInputCreatedAt
 * @export
 */
export type CategoriesScalarWhereWithAggregatesInputCreatedAt = DateTimeWithAggregatesFilter | string;
/**
 *
 * @export
 * @interface CategoriesSelectInput
 */
export interface CategoriesSelectInput {
    /**
     *
     * @type {boolean}
     * @memberof CategoriesSelectInput
     */
    '$related'?: boolean;
    /**
     *
     * @type {boolean}
     * @memberof CategoriesSelectInput
     */
    '$scalars'?: boolean;
    /**
     *
     * @type {boolean}
     * @memberof CategoriesSelectInput
     */
    'categoryName'?: boolean;
    /**
     *
     * @type {boolean}
     * @memberof CategoriesSelectInput
     */
    'createdAt'?: boolean;
    /**
     *
     * @type {boolean}
     * @memberof CategoriesSelectInput
     */
    'id'?: boolean;
    /**
     *
     * @type {boolean}
     * @memberof CategoriesSelectInput
     */
    'updatedAt'?: boolean;
}
/**
 *
 * @export
 * @interface CategoriesUpdateInput
 */
export interface CategoriesUpdateInput {
    /**
     *
     * @type {CategoriesUpdateInputCategoryName}
     * @memberof CategoriesUpdateInput
     */
    'categoryName'?: CategoriesUpdateInputCategoryName;
    /**
     *
     * @type {CategoriesUpdateInputCreatedAt}
     * @memberof CategoriesUpdateInput
     */
    'createdAt'?: CategoriesUpdateInputCreatedAt;
    /**
     *
     * @type {CategoriesUpdateInputCreatedAt}
     * @memberof CategoriesUpdateInput
     */
    'updatedAt'?: CategoriesUpdateInputCreatedAt;
}
/**
 * @type CategoriesUpdateInputCategoryName
 * @export
 */
export type CategoriesUpdateInputCategoryName = StringFieldUpdateOperationsInput | string;
/**
 * @type CategoriesUpdateInputCreatedAt
 * @export
 */
export type CategoriesUpdateInputCreatedAt = DateTimeFieldUpdateOperationsInput | string;
/**
 *
 * @export
 * @interface CategoriesUpdateManyInput
 */
export interface CategoriesUpdateManyInput {
    /**
     *
     * @type {CategoriesUpdateInputCategoryName}
     * @memberof CategoriesUpdateManyInput
     */
    'categoryName'?: CategoriesUpdateInputCategoryName;
    /**
     *
     * @type {CategoriesUpdateInputCreatedAt}
     * @memberof CategoriesUpdateManyInput
     */
    'createdAt'?: CategoriesUpdateInputCreatedAt;
    /**
     *
     * @type {CategoriesUpdateInputCreatedAt}
     * @memberof CategoriesUpdateManyInput
     */
    'updatedAt'?: CategoriesUpdateInputCreatedAt;
}
/**
 *
 * @export
 * @interface CategoriesWhereInput
 */
export interface CategoriesWhereInput {
    /**
     *
     * @type {CategoriesWhereInputAND}
     * @memberof CategoriesWhereInput
     */
    'AND'?: CategoriesWhereInputAND;
    /**
     *
     * @type {CategoriesWhereInputAND}
     * @memberof CategoriesWhereInput
     */
    'NOT'?: CategoriesWhereInputAND;
    /**
     *
     * @type {Array<CategoriesWhereInput>}
     * @memberof CategoriesWhereInput
     */
    'OR'?: Array<CategoriesWhereInput>;
    /**
     *
     * @type {CategoriesWhereInputCategoryName}
     * @memberof CategoriesWhereInput
     */
    'categoryName'?: CategoriesWhereInputCategoryName;
    /**
     *
     * @type {CategoriesWhereInputCreatedAt}
     * @memberof CategoriesWhereInput
     */
    'createdAt'?: CategoriesWhereInputCreatedAt;
    /**
     *
     * @type {CategoriesWhereInputCategoryName}
     * @memberof CategoriesWhereInput
     */
    'id'?: CategoriesWhereInputCategoryName;
    /**
     *
     * @type {CategoriesWhereInputCreatedAt}
     * @memberof CategoriesWhereInput
     */
    'updatedAt'?: CategoriesWhereInputCreatedAt;
}
/**
 * @type CategoriesWhereInputAND
 * @export
 */
export type CategoriesWhereInputAND = Array<CategoriesWhereInput> | CategoriesWhereInput;
/**
 * @type CategoriesWhereInputCategoryName
 * @export
 */
export type CategoriesWhereInputCategoryName = StringFilter | string;
/**
 * @type CategoriesWhereInputCreatedAt
 * @export
 */
export type CategoriesWhereInputCreatedAt = DateTimeFilter | string;
/**
 *
 * @export
 * @interface CategoriesWhereUniqueInput
 */
export interface CategoriesWhereUniqueInput {
    /**
     *
     * @type {string}
     * @memberof CategoriesWhereUniqueInput
     */
    'id'?: string;
}
/**
 *
 * @export
 * @interface CreateManyCategories201Response
 */
export interface CreateManyCategories201Response {
    /**
     *
     * @type {AffectedRowsOutput}
     * @memberof CreateManyCategories201Response
     */
    'data': AffectedRowsOutput;
}
/**
 *
 * @export
 * @interface CreateOneCategories201Response
 */
export interface CreateOneCategories201Response {
    /**
     *
     * @type {Categories}
     * @memberof CreateOneCategories201Response
     */
    'data': Categories;
}
/**
 *
 * @export
 * @interface CreateOneUsers201Response
 */
export interface CreateOneUsers201Response {
    /**
     *
     * @type {Users}
     * @memberof CreateOneUsers201Response
     */
    'data': Users;
}
/**
 *
 * @export
 * @interface DateTimeFieldUpdateOperationsInput
 */
export interface DateTimeFieldUpdateOperationsInput {
    /**
     *
     * @type {string}
     * @memberof DateTimeFieldUpdateOperationsInput
     */
    'set'?: string;
}
/**
 *
 * @export
 * @interface DateTimeFilter
 */
export interface DateTimeFilter {
    /**
     *
     * @type {string}
     * @memberof DateTimeFilter
     */
    'eq'?: string;
    /**
     *
     * @type {string}
     * @memberof DateTimeFilter
     */
    'equals'?: string;
    /**
     *
     * @type {string}
     * @memberof DateTimeFilter
     */
    'gt'?: string;
    /**
     *
     * @type {string}
     * @memberof DateTimeFilter
     */
    'gte'?: string;
    /**
     *
     * @type {Array<string>}
     * @memberof DateTimeFilter
     */
    'in'?: Array<string>;
    /**
     *
     * @type {string}
     * @memberof DateTimeFilter
     */
    'lt'?: string;
    /**
     *
     * @type {string}
     * @memberof DateTimeFilter
     */
    'lte'?: string;
    /**
     *
     * @type {DateTimeFilterNot}
     * @memberof DateTimeFilter
     */
    'not'?: DateTimeFilterNot;
    /**
     *
     * @type {Array<string>}
     * @memberof DateTimeFilter
     */
    'notIn'?: Array<string>;
}
/**
 * @type DateTimeFilterNot
 * @export
 */
export type DateTimeFilterNot = NestedDateTimeFilter | string;
/**
 *
 * @export
 * @interface DateTimeNullableFilter
 */
export interface DateTimeNullableFilter {
    /**
     *
     * @type {string}
     * @memberof DateTimeNullableFilter
     */
    'eq'?: string | null;
    /**
     *
     * @type {string}
     * @memberof DateTimeNullableFilter
     */
    'equals'?: string | null;
    /**
     *
     * @type {string}
     * @memberof DateTimeNullableFilter
     */
    'gt'?: string;
    /**
     *
     * @type {string}
     * @memberof DateTimeNullableFilter
     */
    'gte'?: string;
    /**
     *
     * @type {Array<string>}
     * @memberof DateTimeNullableFilter
     */
    'in'?: Array<string>;
    /**
     *
     * @type {boolean}
     * @memberof DateTimeNullableFilter
     */
    'isSet'?: boolean;
    /**
     *
     * @type {string}
     * @memberof DateTimeNullableFilter
     */
    'lt'?: string;
    /**
     *
     * @type {string}
     * @memberof DateTimeNullableFilter
     */
    'lte'?: string;
    /**
     *
     * @type {DateTimeNullableFilterNot}
     * @memberof DateTimeNullableFilter
     */
    'not'?: DateTimeNullableFilterNot | null;
    /**
     *
     * @type {Array<string>}
     * @memberof DateTimeNullableFilter
     */
    'notIn'?: Array<string>;
}
/**
 * @type DateTimeNullableFilterNot
 * @export
 */
export type DateTimeNullableFilterNot = NestedDateTimeNullableFilter | string;
/**
 *
 * @export
 * @interface DateTimeWithAggregatesFilter
 */
export interface DateTimeWithAggregatesFilter {
    /**
     *
     * @type {NestedIntFilter}
     * @memberof DateTimeWithAggregatesFilter
     */
    '_count'?: NestedIntFilter;
    /**
     *
     * @type {NestedDateTimeFilter}
     * @memberof DateTimeWithAggregatesFilter
     */
    '_max'?: NestedDateTimeFilter;
    /**
     *
     * @type {NestedDateTimeFilter}
     * @memberof DateTimeWithAggregatesFilter
     */
    '_min'?: NestedDateTimeFilter;
    /**
     *
     * @type {string}
     * @memberof DateTimeWithAggregatesFilter
     */
    'eq'?: string;
    /**
     *
     * @type {string}
     * @memberof DateTimeWithAggregatesFilter
     */
    'equals'?: string;
    /**
     *
     * @type {string}
     * @memberof DateTimeWithAggregatesFilter
     */
    'gt'?: string;
    /**
     *
     * @type {string}
     * @memberof DateTimeWithAggregatesFilter
     */
    'gte'?: string;
    /**
     *
     * @type {Array<string>}
     * @memberof DateTimeWithAggregatesFilter
     */
    'in'?: Array<string>;
    /**
     *
     * @type {string}
     * @memberof DateTimeWithAggregatesFilter
     */
    'lt'?: string;
    /**
     *
     * @type {string}
     * @memberof DateTimeWithAggregatesFilter
     */
    'lte'?: string;
    /**
     *
     * @type {DateTimeWithAggregatesFilterNot}
     * @memberof DateTimeWithAggregatesFilter
     */
    'not'?: DateTimeWithAggregatesFilterNot;
    /**
     *
     * @type {Array<string>}
     * @memberof DateTimeWithAggregatesFilter
     */
    'notIn'?: Array<string>;
}
/**
 * @type DateTimeWithAggregatesFilterNot
 * @export
 */
export type DateTimeWithAggregatesFilterNot = NestedDateTimeWithAggregatesFilter | string;
/**
 *
 * @export
 * @interface EnumTaskStatusFieldUpdateOperationsInput
 */
export interface EnumTaskStatusFieldUpdateOperationsInput {
    /**
     *
     * @type {TaskStatus}
     * @memberof EnumTaskStatusFieldUpdateOperationsInput
     */
    'set'?: TaskStatus;
}
/**
 *
 * @export
 * @interface EnumTaskStatusFilter
 */
export interface EnumTaskStatusFilter {
    /**
     *
     * @type {TaskStatus}
     * @memberof EnumTaskStatusFilter
     */
    'eq'?: TaskStatus;
    /**
     *
     * @type {TaskStatus}
     * @memberof EnumTaskStatusFilter
     */
    'equals'?: TaskStatus;
    /**
     *
     * @type {Array<TaskStatus>}
     * @memberof EnumTaskStatusFilter
     */
    'in'?: Array<TaskStatus>;
    /**
     *
     * @type {EnumTaskStatusFilterNot}
     * @memberof EnumTaskStatusFilter
     */
    'not'?: EnumTaskStatusFilterNot;
    /**
     *
     * @type {Array<TaskStatus>}
     * @memberof EnumTaskStatusFilter
     */
    'notIn'?: Array<TaskStatus>;
}
/**
 * @type EnumTaskStatusFilterNot
 * @export
 */
export type EnumTaskStatusFilterNot = NestedEnumTaskStatusFilter | TaskStatus;
/**
 *
 * @export
 * @interface ErrorResponse
 */
export interface ErrorResponse {
    /**
     *
     * @type {object}
     * @memberof ErrorResponse
     */
    'details'?: object;
    /**
     *
     * @type {string}
     * @memberof ErrorResponse
     */
    'error': string;
}
/**
 *
 * @export
 * @interface FindCategories200Response
 */
export interface FindCategories200Response {
    /**
     *
     * @type {Array<Categories>}
     * @memberof FindCategories200Response
     */
    'data': Array<Categories>;
}
/**
 *
 * @export
 * @interface FindCategories400Response
 */
export interface FindCategories400Response {
    /**
     *
     * @type {Array<ErrorResponse>}
     * @memberof FindCategories400Response
     */
    'errors': Array<ErrorResponse>;
}
/**
 *
 * @export
 * @interface FindUsers200Response
 */
export interface FindUsers200Response {
    /**
     *
     * @type {Array<Users>}
     * @memberof FindUsers200Response
     */
    'data': Array<Users>;
}
/**
 *
 * @export
 * @interface GroupByCategories200Response
 */
export interface GroupByCategories200Response {
    /**
     *
     * @type {Array<CategoriesGroupByOutputType>}
     * @memberof GroupByCategories200Response
     */
    'data': Array<CategoriesGroupByOutputType>;
}
/**
 *
 * @export
 * @interface GroupByUsers200Response
 */
export interface GroupByUsers200Response {
    /**
     *
     * @type {Array<UsersGroupByOutputType>}
     * @memberof GroupByUsers200Response
     */
    'data': Array<UsersGroupByOutputType>;
}
/**
 *
 * @export
 * @interface NestedDateTimeFilter
 */
export interface NestedDateTimeFilter {
    /**
     *
     * @type {string}
     * @memberof NestedDateTimeFilter
     */
    'eq'?: string;
    /**
     *
     * @type {string}
     * @memberof NestedDateTimeFilter
     */
    'equals'?: string;
    /**
     *
     * @type {string}
     * @memberof NestedDateTimeFilter
     */
    'gt'?: string;
    /**
     *
     * @type {string}
     * @memberof NestedDateTimeFilter
     */
    'gte'?: string;
    /**
     *
     * @type {Array<string>}
     * @memberof NestedDateTimeFilter
     */
    'in'?: Array<string>;
    /**
     *
     * @type {string}
     * @memberof NestedDateTimeFilter
     */
    'lt'?: string;
    /**
     *
     * @type {string}
     * @memberof NestedDateTimeFilter
     */
    'lte'?: string;
    /**
     *
     * @type {DateTimeFilterNot}
     * @memberof NestedDateTimeFilter
     */
    'not'?: DateTimeFilterNot;
    /**
     *
     * @type {Array<string>}
     * @memberof NestedDateTimeFilter
     */
    'notIn'?: Array<string>;
}
/**
 *
 * @export
 * @interface NestedDateTimeNullableFilter
 */
export interface NestedDateTimeNullableFilter {
    /**
     *
     * @type {string}
     * @memberof NestedDateTimeNullableFilter
     */
    'eq'?: string | null;
    /**
     *
     * @type {string}
     * @memberof NestedDateTimeNullableFilter
     */
    'equals'?: string | null;
    /**
     *
     * @type {string}
     * @memberof NestedDateTimeNullableFilter
     */
    'gt'?: string;
    /**
     *
     * @type {string}
     * @memberof NestedDateTimeNullableFilter
     */
    'gte'?: string;
    /**
     *
     * @type {Array<string>}
     * @memberof NestedDateTimeNullableFilter
     */
    'in'?: Array<string>;
    /**
     *
     * @type {boolean}
     * @memberof NestedDateTimeNullableFilter
     */
    'isSet'?: boolean;
    /**
     *
     * @type {string}
     * @memberof NestedDateTimeNullableFilter
     */
    'lt'?: string;
    /**
     *
     * @type {string}
     * @memberof NestedDateTimeNullableFilter
     */
    'lte'?: string;
    /**
     *
     * @type {DateTimeNullableFilterNot}
     * @memberof NestedDateTimeNullableFilter
     */
    'not'?: DateTimeNullableFilterNot | null;
    /**
     *
     * @type {Array<string>}
     * @memberof NestedDateTimeNullableFilter
     */
    'notIn'?: Array<string>;
}
/**
 *
 * @export
 * @interface NestedDateTimeWithAggregatesFilter
 */
export interface NestedDateTimeWithAggregatesFilter {
    /**
     *
     * @type {NestedIntFilter}
     * @memberof NestedDateTimeWithAggregatesFilter
     */
    '_count'?: NestedIntFilter;
    /**
     *
     * @type {NestedDateTimeFilter}
     * @memberof NestedDateTimeWithAggregatesFilter
     */
    '_max'?: NestedDateTimeFilter;
    /**
     *
     * @type {NestedDateTimeFilter}
     * @memberof NestedDateTimeWithAggregatesFilter
     */
    '_min'?: NestedDateTimeFilter;
    /**
     *
     * @type {string}
     * @memberof NestedDateTimeWithAggregatesFilter
     */
    'eq'?: string;
    /**
     *
     * @type {string}
     * @memberof NestedDateTimeWithAggregatesFilter
     */
    'equals'?: string;
    /**
     *
     * @type {string}
     * @memberof NestedDateTimeWithAggregatesFilter
     */
    'gt'?: string;
    /**
     *
     * @type {string}
     * @memberof NestedDateTimeWithAggregatesFilter
     */
    'gte'?: string;
    /**
     *
     * @type {Array<string>}
     * @memberof NestedDateTimeWithAggregatesFilter
     */
    'in'?: Array<string>;
    /**
     *
     * @type {string}
     * @memberof NestedDateTimeWithAggregatesFilter
     */
    'lt'?: string;
    /**
     *
     * @type {string}
     * @memberof NestedDateTimeWithAggregatesFilter
     */
    'lte'?: string;
    /**
     *
     * @type {DateTimeWithAggregatesFilterNot}
     * @memberof NestedDateTimeWithAggregatesFilter
     */
    'not'?: DateTimeWithAggregatesFilterNot;
    /**
     *
     * @type {Array<string>}
     * @memberof NestedDateTimeWithAggregatesFilter
     */
    'notIn'?: Array<string>;
}
/**
 *
 * @export
 * @interface NestedEnumTaskStatusFilter
 */
export interface NestedEnumTaskStatusFilter {
    /**
     *
     * @type {TaskStatus}
     * @memberof NestedEnumTaskStatusFilter
     */
    'eq'?: TaskStatus;
    /**
     *
     * @type {TaskStatus}
     * @memberof NestedEnumTaskStatusFilter
     */
    'equals'?: TaskStatus;
    /**
     *
     * @type {Array<TaskStatus>}
     * @memberof NestedEnumTaskStatusFilter
     */
    'in'?: Array<TaskStatus>;
    /**
     *
     * @type {EnumTaskStatusFilterNot}
     * @memberof NestedEnumTaskStatusFilter
     */
    'not'?: EnumTaskStatusFilterNot;
    /**
     *
     * @type {Array<TaskStatus>}
     * @memberof NestedEnumTaskStatusFilter
     */
    'notIn'?: Array<TaskStatus>;
}
/**
 *
 * @export
 * @interface NestedIntFilter
 */
export interface NestedIntFilter {
    /**
     *
     * @type {number}
     * @memberof NestedIntFilter
     */
    'eq'?: number;
    /**
     *
     * @type {number}
     * @memberof NestedIntFilter
     */
    'equals'?: number;
    /**
     *
     * @type {number}
     * @memberof NestedIntFilter
     */
    'gt'?: number;
    /**
     *
     * @type {number}
     * @memberof NestedIntFilter
     */
    'gte'?: number;
    /**
     *
     * @type {Array<number>}
     * @memberof NestedIntFilter
     */
    'in'?: Array<number>;
    /**
     *
     * @type {number}
     * @memberof NestedIntFilter
     */
    'lt'?: number;
    /**
     *
     * @type {number}
     * @memberof NestedIntFilter
     */
    'lte'?: number;
    /**
     *
     * @type {NestedIntFilterNot}
     * @memberof NestedIntFilter
     */
    'not'?: NestedIntFilterNot;
    /**
     *
     * @type {Array<number>}
     * @memberof NestedIntFilter
     */
    'notIn'?: Array<number>;
}
/**
 * @type NestedIntFilterNot
 * @export
 */
export type NestedIntFilterNot = NestedIntFilter | number;
/**
 *
 * @export
 * @interface NestedStringFilter
 */
export interface NestedStringFilter {
    /**
     *
     * @type {string}
     * @memberof NestedStringFilter
     */
    'contains'?: string;
    /**
     *
     * @type {string}
     * @memberof NestedStringFilter
     */
    'endsWith'?: string;
    /**
     *
     * @type {string}
     * @memberof NestedStringFilter
     */
    'eq'?: string;
    /**
     *
     * @type {string}
     * @memberof NestedStringFilter
     */
    'equals'?: string;
    /**
     *
     * @type {string}
     * @memberof NestedStringFilter
     */
    'gt'?: string;
    /**
     *
     * @type {string}
     * @memberof NestedStringFilter
     */
    'gte'?: string;
    /**
     *
     * @type {Array<string>}
     * @memberof NestedStringFilter
     */
    'in'?: Array<string>;
    /**
     *
     * @type {string}
     * @memberof NestedStringFilter
     */
    'lt'?: string;
    /**
     *
     * @type {string}
     * @memberof NestedStringFilter
     */
    'lte'?: string;
    /**
     *
     * @type {NestedStringFilterNot}
     * @memberof NestedStringFilter
     */
    'not'?: NestedStringFilterNot;
    /**
     *
     * @type {Array<string>}
     * @memberof NestedStringFilter
     */
    'notIn'?: Array<string>;
    /**
     *
     * @type {string}
     * @memberof NestedStringFilter
     */
    'startsWith'?: string;
}
/**
 * @type NestedStringFilterNot
 * @export
 */
export type NestedStringFilterNot = NestedStringFilter | string;
/**
 *
 * @export
 * @interface NestedStringNullableFilter
 */
export interface NestedStringNullableFilter {
    /**
     *
     * @type {string}
     * @memberof NestedStringNullableFilter
     */
    'contains'?: string;
    /**
     *
     * @type {string}
     * @memberof NestedStringNullableFilter
     */
    'endsWith'?: string;
    /**
     *
     * @type {string}
     * @memberof NestedStringNullableFilter
     */
    'eq'?: string | null;
    /**
     *
     * @type {string}
     * @memberof NestedStringNullableFilter
     */
    'equals'?: string | null;
    /**
     *
     * @type {string}
     * @memberof NestedStringNullableFilter
     */
    'gt'?: string;
    /**
     *
     * @type {string}
     * @memberof NestedStringNullableFilter
     */
    'gte'?: string;
    /**
     *
     * @type {Array<string>}
     * @memberof NestedStringNullableFilter
     */
    'in'?: Array<string>;
    /**
     *
     * @type {boolean}
     * @memberof NestedStringNullableFilter
     */
    'isSet'?: boolean;
    /**
     *
     * @type {string}
     * @memberof NestedStringNullableFilter
     */
    'lt'?: string;
    /**
     *
     * @type {string}
     * @memberof NestedStringNullableFilter
     */
    'lte'?: string;
    /**
     *
     * @type {NestedStringNullableFilterNot}
     * @memberof NestedStringNullableFilter
     */
    'not'?: NestedStringNullableFilterNot | null;
    /**
     *
     * @type {Array<string>}
     * @memberof NestedStringNullableFilter
     */
    'notIn'?: Array<string>;
    /**
     *
     * @type {string}
     * @memberof NestedStringNullableFilter
     */
    'startsWith'?: string;
}
/**
 * @type NestedStringNullableFilterNot
 * @export
 */
export type NestedStringNullableFilterNot = NestedStringNullableFilter | string;
/**
 *
 * @export
 * @interface NestedStringWithAggregatesFilter
 */
export interface NestedStringWithAggregatesFilter {
    /**
     *
     * @type {NestedIntFilter}
     * @memberof NestedStringWithAggregatesFilter
     */
    '_count'?: NestedIntFilter;
    /**
     *
     * @type {NestedStringFilter}
     * @memberof NestedStringWithAggregatesFilter
     */
    '_max'?: NestedStringFilter;
    /**
     *
     * @type {NestedStringFilter}
     * @memberof NestedStringWithAggregatesFilter
     */
    '_min'?: NestedStringFilter;
    /**
     *
     * @type {string}
     * @memberof NestedStringWithAggregatesFilter
     */
    'contains'?: string;
    /**
     *
     * @type {string}
     * @memberof NestedStringWithAggregatesFilter
     */
    'endsWith'?: string;
    /**
     *
     * @type {string}
     * @memberof NestedStringWithAggregatesFilter
     */
    'eq'?: string;
    /**
     *
     * @type {string}
     * @memberof NestedStringWithAggregatesFilter
     */
    'equals'?: string;
    /**
     *
     * @type {string}
     * @memberof NestedStringWithAggregatesFilter
     */
    'gt'?: string;
    /**
     *
     * @type {string}
     * @memberof NestedStringWithAggregatesFilter
     */
    'gte'?: string;
    /**
     *
     * @type {Array<string>}
     * @memberof NestedStringWithAggregatesFilter
     */
    'in'?: Array<string>;
    /**
     *
     * @type {string}
     * @memberof NestedStringWithAggregatesFilter
     */
    'lt'?: string;
    /**
     *
     * @type {string}
     * @memberof NestedStringWithAggregatesFilter
     */
    'lte'?: string;
    /**
     *
     * @type {NestedStringWithAggregatesFilterNot}
     * @memberof NestedStringWithAggregatesFilter
     */
    'not'?: NestedStringWithAggregatesFilterNot;
    /**
     *
     * @type {Array<string>}
     * @memberof NestedStringWithAggregatesFilter
     */
    'notIn'?: Array<string>;
    /**
     *
     * @type {string}
     * @memberof NestedStringWithAggregatesFilter
     */
    'startsWith'?: string;
}
/**
 * @type NestedStringWithAggregatesFilterNot
 * @export
 */
export type NestedStringWithAggregatesFilterNot = NestedStringWithAggregatesFilter | string;
/**
 *
 * @export
 * @interface NullableDateTimeFieldUpdateOperationsInput
 */
export interface NullableDateTimeFieldUpdateOperationsInput {
    /**
     *
     * @type {string}
     * @memberof NullableDateTimeFieldUpdateOperationsInput
     */
    'set'?: string | null;
    /**
     *
     * @type {boolean}
     * @memberof NullableDateTimeFieldUpdateOperationsInput
     */
    'unset'?: boolean;
}
/**
 *
 * @export
 * @interface NullableStringFieldUpdateOperationsInput
 */
export interface NullableStringFieldUpdateOperationsInput {
    /**
     *
     * @type {string}
     * @memberof NullableStringFieldUpdateOperationsInput
     */
    'set'?: string | null;
    /**
     *
     * @type {boolean}
     * @memberof NullableStringFieldUpdateOperationsInput
     */
    'unset'?: boolean;
}
/**
 *
 * @export
 * @enum {string}
 */
export declare const QueryMode: {
    readonly Default: "default";
    readonly Insensitive: "insensitive";
};
export type QueryMode = typeof QueryMode[keyof typeof QueryMode];
/**
 *
 * @export
 * @enum {string}
 */
export declare const SortOrder: {
    readonly Asc: "asc";
    readonly Desc: "desc";
};
export type SortOrder = typeof SortOrder[keyof typeof SortOrder];
/**
 *
 * @export
 * @interface StringFieldUpdateOperationsInput
 */
export interface StringFieldUpdateOperationsInput {
    /**
     *
     * @type {string}
     * @memberof StringFieldUpdateOperationsInput
     */
    'set'?: string;
}
/**
 *
 * @export
 * @interface StringFilter
 */
export interface StringFilter {
    /**
     *
     * @type {string}
     * @memberof StringFilter
     */
    'contains'?: string;
    /**
     *
     * @type {string}
     * @memberof StringFilter
     */
    'endsWith'?: string;
    /**
     *
     * @type {string}
     * @memberof StringFilter
     */
    'eq'?: string;
    /**
     *
     * @type {string}
     * @memberof StringFilter
     */
    'equals'?: string;
    /**
     *
     * @type {string}
     * @memberof StringFilter
     */
    'gt'?: string;
    /**
     *
     * @type {string}
     * @memberof StringFilter
     */
    'gte'?: string;
    /**
     *
     * @type {Array<string>}
     * @memberof StringFilter
     */
    'in'?: Array<string>;
    /**
     *
     * @type {string}
     * @memberof StringFilter
     */
    'lt'?: string;
    /**
     *
     * @type {string}
     * @memberof StringFilter
     */
    'lte'?: string;
    /**
     *
     * @type {QueryMode}
     * @memberof StringFilter
     */
    'mode'?: QueryMode;
    /**
     *
     * @type {NestedStringFilterNot}
     * @memberof StringFilter
     */
    'not'?: NestedStringFilterNot;
    /**
     *
     * @type {Array<string>}
     * @memberof StringFilter
     */
    'notIn'?: Array<string>;
    /**
     *
     * @type {string}
     * @memberof StringFilter
     */
    'startsWith'?: string;
}
/**
 *
 * @export
 * @interface StringNullableFilter
 */
export interface StringNullableFilter {
    /**
     *
     * @type {string}
     * @memberof StringNullableFilter
     */
    'contains'?: string;
    /**
     *
     * @type {string}
     * @memberof StringNullableFilter
     */
    'endsWith'?: string;
    /**
     *
     * @type {string}
     * @memberof StringNullableFilter
     */
    'eq'?: string | null;
    /**
     *
     * @type {string}
     * @memberof StringNullableFilter
     */
    'equals'?: string | null;
    /**
     *
     * @type {string}
     * @memberof StringNullableFilter
     */
    'gt'?: string;
    /**
     *
     * @type {string}
     * @memberof StringNullableFilter
     */
    'gte'?: string;
    /**
     *
     * @type {Array<string>}
     * @memberof StringNullableFilter
     */
    'in'?: Array<string>;
    /**
     *
     * @type {boolean}
     * @memberof StringNullableFilter
     */
    'isSet'?: boolean;
    /**
     *
     * @type {string}
     * @memberof StringNullableFilter
     */
    'lt'?: string;
    /**
     *
     * @type {string}
     * @memberof StringNullableFilter
     */
    'lte'?: string;
    /**
     *
     * @type {QueryMode}
     * @memberof StringNullableFilter
     */
    'mode'?: QueryMode;
    /**
     *
     * @type {NestedStringNullableFilterNot}
     * @memberof StringNullableFilter
     */
    'not'?: NestedStringNullableFilterNot | null;
    /**
     *
     * @type {Array<string>}
     * @memberof StringNullableFilter
     */
    'notIn'?: Array<string>;
    /**
     *
     * @type {string}
     * @memberof StringNullableFilter
     */
    'startsWith'?: string;
}
/**
 *
 * @export
 * @interface StringNullableListFilter
 */
export interface StringNullableListFilter {
    /**
     *
     * @type {Array<string>}
     * @memberof StringNullableListFilter
     */
    'eq'?: Array<string>;
    /**
     *
     * @type {Array<string>}
     * @memberof StringNullableListFilter
     */
    'equals'?: Array<string>;
    /**
     *
     * @type {string}
     * @memberof StringNullableListFilter
     */
    'has'?: string | null;
    /**
     *
     * @type {Array<string>}
     * @memberof StringNullableListFilter
     */
    'hasEvery'?: Array<string>;
    /**
     *
     * @type {Array<string>}
     * @memberof StringNullableListFilter
     */
    'hasSome'?: Array<string>;
    /**
     *
     * @type {boolean}
     * @memberof StringNullableListFilter
     */
    'isEmpty'?: boolean;
}
/**
 *
 * @export
 * @interface StringWithAggregatesFilter
 */
export interface StringWithAggregatesFilter {
    /**
     *
     * @type {NestedIntFilter}
     * @memberof StringWithAggregatesFilter
     */
    '_count'?: NestedIntFilter;
    /**
     *
     * @type {NestedStringFilter}
     * @memberof StringWithAggregatesFilter
     */
    '_max'?: NestedStringFilter;
    /**
     *
     * @type {NestedStringFilter}
     * @memberof StringWithAggregatesFilter
     */
    '_min'?: NestedStringFilter;
    /**
     *
     * @type {string}
     * @memberof StringWithAggregatesFilter
     */
    'contains'?: string;
    /**
     *
     * @type {string}
     * @memberof StringWithAggregatesFilter
     */
    'endsWith'?: string;
    /**
     *
     * @type {string}
     * @memberof StringWithAggregatesFilter
     */
    'eq'?: string;
    /**
     *
     * @type {string}
     * @memberof StringWithAggregatesFilter
     */
    'equals'?: string;
    /**
     *
     * @type {string}
     * @memberof StringWithAggregatesFilter
     */
    'gt'?: string;
    /**
     *
     * @type {string}
     * @memberof StringWithAggregatesFilter
     */
    'gte'?: string;
    /**
     *
     * @type {Array<string>}
     * @memberof StringWithAggregatesFilter
     */
    'in'?: Array<string>;
    /**
     *
     * @type {string}
     * @memberof StringWithAggregatesFilter
     */
    'lt'?: string;
    /**
     *
     * @type {string}
     * @memberof StringWithAggregatesFilter
     */
    'lte'?: string;
    /**
     *
     * @type {QueryMode}
     * @memberof StringWithAggregatesFilter
     */
    'mode'?: QueryMode;
    /**
     *
     * @type {NestedStringWithAggregatesFilterNot}
     * @memberof StringWithAggregatesFilter
     */
    'not'?: NestedStringWithAggregatesFilterNot;
    /**
     *
     * @type {Array<string>}
     * @memberof StringWithAggregatesFilter
     */
    'notIn'?: Array<string>;
    /**
     *
     * @type {string}
     * @memberof StringWithAggregatesFilter
     */
    'startsWith'?: string;
}
/**
 *
 * @export
 * @enum {string}
 */
export declare const TaskStatus: {
    readonly Inprogress: "INPROGRESS";
    readonly Completed: "COMPLETED";
    readonly New: "NEW";
    readonly Pending: "PENDING";
};
export type TaskStatus = typeof TaskStatus[keyof typeof TaskStatus];
/**
 *
 * @export
 * @interface Tasks
 */
export interface Tasks {
    /**
     *
     * @type {Array<string>}
     * @memberof Tasks
     */
    'categoryIds'?: Array<string>;
    /**
     *
     * @type {string}
     * @memberof Tasks
     */
    'createdAt'?: string;
    /**
     *
     * @type {string}
     * @memberof Tasks
     */
    'description'?: string | null;
    /**
     *
     * @type {string}
     * @memberof Tasks
     */
    'dueDate'?: string | null;
    /**
     *
     * @type {string}
     * @memberof Tasks
     */
    'id'?: string;
    /**
     *
     * @type {TaskStatus}
     * @memberof Tasks
     */
    'status'?: TaskStatus;
    /**
     *
     * @type {string}
     * @memberof Tasks
     */
    'title'?: string;
    /**
     *
     * @type {string}
     * @memberof Tasks
     */
    'updatedAt'?: string;
}
/**
 *
 * @export
 * @interface TasksCompositeListFilter
 */
export interface TasksCompositeListFilter {
    /**
     *
     * @type {TasksCompositeListFilterEq}
     * @memberof TasksCompositeListFilter
     */
    'eq'?: TasksCompositeListFilterEq;
    /**
     *
     * @type {TasksCompositeListFilterEq}
     * @memberof TasksCompositeListFilter
     */
    'equals'?: TasksCompositeListFilterEq;
    /**
     *
     * @type {TasksWhereInput}
     * @memberof TasksCompositeListFilter
     */
    'every'?: TasksWhereInput;
    /**
     *
     * @type {boolean}
     * @memberof TasksCompositeListFilter
     */
    'isEmpty'?: boolean;
    /**
     *
     * @type {boolean}
     * @memberof TasksCompositeListFilter
     */
    'isSet'?: boolean;
    /**
     *
     * @type {TasksWhereInput}
     * @memberof TasksCompositeListFilter
     */
    'none'?: TasksWhereInput;
    /**
     *
     * @type {TasksWhereInput}
     * @memberof TasksCompositeListFilter
     */
    'some'?: TasksWhereInput;
}
/**
 * @type TasksCompositeListFilterEq
 * @export
 */
export type TasksCompositeListFilterEq = Array<TasksObjectEqualityInput> | TasksObjectEqualityInput;
/**
 *
 * @export
 * @interface TasksCreateInput
 */
export interface TasksCreateInput {
    /**
     *
     * @type {TasksCreateInputCategoryIds}
     * @memberof TasksCreateInput
     */
    'categoryIds'?: TasksCreateInputCategoryIds;
    /**
     *
     * @type {string}
     * @memberof TasksCreateInput
     */
    'createdAt'?: string;
    /**
     *
     * @type {string}
     * @memberof TasksCreateInput
     */
    'description'?: string | null;
    /**
     *
     * @type {string}
     * @memberof TasksCreateInput
     */
    'dueDate'?: string | null;
    /**
     *
     * @type {string}
     * @memberof TasksCreateInput
     */
    'id': string;
    /**
     *
     * @type {TaskStatus}
     * @memberof TasksCreateInput
     */
    'status'?: TaskStatus;
    /**
     *
     * @type {string}
     * @memberof TasksCreateInput
     */
    'title': string;
    /**
     *
     * @type {string}
     * @memberof TasksCreateInput
     */
    'updatedAt': string;
}
/**
 * @type TasksCreateInputCategoryIds
 * @export
 */
export type TasksCreateInputCategoryIds = Array<string> | TasksCreatecategoryIdsInput;
/**
 *
 * @export
 * @interface TasksCreatecategoryIdsInput
 */
export interface TasksCreatecategoryIdsInput {
    /**
     *
     * @type {Array<string>}
     * @memberof TasksCreatecategoryIdsInput
     */
    'set': Array<string>;
}
/**
 *
 * @export
 * @interface TasksDeleteManyInput
 */
export interface TasksDeleteManyInput {
    /**
     *
     * @type {TasksWhereInput}
     * @memberof TasksDeleteManyInput
     */
    'where': TasksWhereInput;
}
/**
 *
 * @export
 * @interface TasksListCreateEnvelopeInput
 */
export interface TasksListCreateEnvelopeInput {
    /**
     *
     * @type {TasksListCreateEnvelopeInputSet}
     * @memberof TasksListCreateEnvelopeInput
     */
    'set'?: TasksListCreateEnvelopeInputSet;
}
/**
 * @type TasksListCreateEnvelopeInputSet
 * @export
 */
export type TasksListCreateEnvelopeInputSet = Array<TasksCreateInput> | TasksCreateInput;
/**
 *
 * @export
 * @interface TasksListUpdateEnvelopeInput
 */
export interface TasksListUpdateEnvelopeInput {
    /**
     *
     * @type {TasksDeleteManyInput}
     * @memberof TasksListUpdateEnvelopeInput
     */
    'deleteMany'?: TasksDeleteManyInput;
    /**
     *
     * @type {TasksListCreateEnvelopeInputSet}
     * @memberof TasksListUpdateEnvelopeInput
     */
    'push'?: TasksListCreateEnvelopeInputSet;
    /**
     *
     * @type {TasksListCreateEnvelopeInputSet}
     * @memberof TasksListUpdateEnvelopeInput
     */
    'set'?: TasksListCreateEnvelopeInputSet;
    /**
     *
     * @type {TasksUpdateManyInput}
     * @memberof TasksListUpdateEnvelopeInput
     */
    'updateMany'?: TasksUpdateManyInput;
}
/**
 *
 * @export
 * @interface TasksObjectEqualityInput
 */
export interface TasksObjectEqualityInput {
    /**
     *
     * @type {Array<string>}
     * @memberof TasksObjectEqualityInput
     */
    'categoryIds'?: Array<string>;
    /**
     *
     * @type {string}
     * @memberof TasksObjectEqualityInput
     */
    'createdAt': string;
    /**
     *
     * @type {string}
     * @memberof TasksObjectEqualityInput
     */
    'description'?: string | null;
    /**
     *
     * @type {string}
     * @memberof TasksObjectEqualityInput
     */
    'dueDate'?: string | null;
    /**
     *
     * @type {string}
     * @memberof TasksObjectEqualityInput
     */
    'id': string;
    /**
     *
     * @type {TaskStatus}
     * @memberof TasksObjectEqualityInput
     */
    'status': TaskStatus;
    /**
     *
     * @type {string}
     * @memberof TasksObjectEqualityInput
     */
    'title': string;
    /**
     *
     * @type {string}
     * @memberof TasksObjectEqualityInput
     */
    'updatedAt': string;
}
/**
 *
 * @export
 * @interface TasksOrderByCompositeAggregateInput
 */
export interface TasksOrderByCompositeAggregateInput {
    /**
     *
     * @type {SortOrder}
     * @memberof TasksOrderByCompositeAggregateInput
     */
    '_count'?: SortOrder;
}
/**
 *
 * @export
 * @interface TasksSelectInput
 */
export interface TasksSelectInput {
    /**
     *
     * @type {boolean}
     * @memberof TasksSelectInput
     */
    '$scalars'?: boolean;
    /**
     *
     * @type {boolean}
     * @memberof TasksSelectInput
     */
    'categoryIds'?: boolean;
    /**
     *
     * @type {boolean}
     * @memberof TasksSelectInput
     */
    'createdAt'?: boolean;
    /**
     *
     * @type {boolean}
     * @memberof TasksSelectInput
     */
    'description'?: boolean;
    /**
     *
     * @type {boolean}
     * @memberof TasksSelectInput
     */
    'dueDate'?: boolean;
    /**
     *
     * @type {boolean}
     * @memberof TasksSelectInput
     */
    'id'?: boolean;
    /**
     *
     * @type {boolean}
     * @memberof TasksSelectInput
     */
    'status'?: boolean;
    /**
     *
     * @type {boolean}
     * @memberof TasksSelectInput
     */
    'title'?: boolean;
    /**
     *
     * @type {boolean}
     * @memberof TasksSelectInput
     */
    'updatedAt'?: boolean;
}
/**
 *
 * @export
 * @interface TasksUpdateInput
 */
export interface TasksUpdateInput {
    /**
     *
     * @type {TasksUpdateInputCategoryIds}
     * @memberof TasksUpdateInput
     */
    'categoryIds'?: TasksUpdateInputCategoryIds;
    /**
     *
     * @type {CategoriesUpdateInputCreatedAt}
     * @memberof TasksUpdateInput
     */
    'createdAt'?: CategoriesUpdateInputCreatedAt;
    /**
     *
     * @type {TasksUpdateInputDescription}
     * @memberof TasksUpdateInput
     */
    'description'?: TasksUpdateInputDescription | null;
    /**
     *
     * @type {TasksUpdateInputDueDate}
     * @memberof TasksUpdateInput
     */
    'dueDate'?: TasksUpdateInputDueDate | null;
    /**
     *
     * @type {CategoriesUpdateInputCategoryName}
     * @memberof TasksUpdateInput
     */
    'id'?: CategoriesUpdateInputCategoryName;
    /**
     *
     * @type {TasksUpdateInputStatus}
     * @memberof TasksUpdateInput
     */
    'status'?: TasksUpdateInputStatus;
    /**
     *
     * @type {CategoriesUpdateInputCategoryName}
     * @memberof TasksUpdateInput
     */
    'title'?: CategoriesUpdateInputCategoryName;
    /**
     *
     * @type {CategoriesUpdateInputCreatedAt}
     * @memberof TasksUpdateInput
     */
    'updatedAt'?: CategoriesUpdateInputCreatedAt;
}
/**
 * @type TasksUpdateInputCategoryIds
 * @export
 */
export type TasksUpdateInputCategoryIds = Array<string> | TasksUpdatecategoryIdsInput;
/**
 * @type TasksUpdateInputDescription
 * @export
 */
export type TasksUpdateInputDescription = NullableStringFieldUpdateOperationsInput | string;
/**
 * @type TasksUpdateInputDueDate
 * @export
 */
export type TasksUpdateInputDueDate = NullableDateTimeFieldUpdateOperationsInput | string;
/**
 * @type TasksUpdateInputStatus
 * @export
 */
export type TasksUpdateInputStatus = EnumTaskStatusFieldUpdateOperationsInput | TaskStatus;
/**
 *
 * @export
 * @interface TasksUpdateManyInput
 */
export interface TasksUpdateManyInput {
    /**
     *
     * @type {TasksUpdateInput}
     * @memberof TasksUpdateManyInput
     */
    'data': TasksUpdateInput;
    /**
     *
     * @type {TasksWhereInput}
     * @memberof TasksUpdateManyInput
     */
    'where': TasksWhereInput;
}
/**
 *
 * @export
 * @interface TasksUpdatecategoryIdsInput
 */
export interface TasksUpdatecategoryIdsInput {
    /**
     *
     * @type {TasksUpdatecategoryIdsInputPush}
     * @memberof TasksUpdatecategoryIdsInput
     */
    'push'?: TasksUpdatecategoryIdsInputPush;
    /**
     *
     * @type {Array<string>}
     * @memberof TasksUpdatecategoryIdsInput
     */
    'set'?: Array<string>;
}
/**
 * @type TasksUpdatecategoryIdsInputPush
 * @export
 */
export type TasksUpdatecategoryIdsInputPush = Array<string> | string;
/**
 *
 * @export
 * @interface TasksWhereInput
 */
export interface TasksWhereInput {
    /**
     *
     * @type {TasksWhereInputAND}
     * @memberof TasksWhereInput
     */
    'AND'?: TasksWhereInputAND;
    /**
     *
     * @type {TasksWhereInputAND}
     * @memberof TasksWhereInput
     */
    'NOT'?: TasksWhereInputAND;
    /**
     *
     * @type {Array<TasksWhereInput>}
     * @memberof TasksWhereInput
     */
    'OR'?: Array<TasksWhereInput>;
    /**
     *
     * @type {StringNullableListFilter}
     * @memberof TasksWhereInput
     */
    'categoryIds'?: StringNullableListFilter;
    /**
     *
     * @type {CategoriesWhereInputCreatedAt}
     * @memberof TasksWhereInput
     */
    'createdAt'?: CategoriesWhereInputCreatedAt;
    /**
     *
     * @type {TasksWhereInputDescription}
     * @memberof TasksWhereInput
     */
    'description'?: TasksWhereInputDescription | null;
    /**
     *
     * @type {TasksWhereInputDueDate}
     * @memberof TasksWhereInput
     */
    'dueDate'?: TasksWhereInputDueDate | null;
    /**
     *
     * @type {CategoriesWhereInputCategoryName}
     * @memberof TasksWhereInput
     */
    'id'?: CategoriesWhereInputCategoryName;
    /**
     *
     * @type {TasksWhereInputStatus}
     * @memberof TasksWhereInput
     */
    'status'?: TasksWhereInputStatus;
    /**
     *
     * @type {CategoriesWhereInputCategoryName}
     * @memberof TasksWhereInput
     */
    'title'?: CategoriesWhereInputCategoryName;
    /**
     *
     * @type {CategoriesWhereInputCreatedAt}
     * @memberof TasksWhereInput
     */
    'updatedAt'?: CategoriesWhereInputCreatedAt;
}
/**
 * @type TasksWhereInputAND
 * @export
 */
export type TasksWhereInputAND = Array<TasksWhereInput> | TasksWhereInput;
/**
 * @type TasksWhereInputDescription
 * @export
 */
export type TasksWhereInputDescription = StringNullableFilter | string;
/**
 * @type TasksWhereInputDueDate
 * @export
 */
export type TasksWhereInputDueDate = DateTimeNullableFilter | string;
/**
 * @type TasksWhereInputStatus
 * @export
 */
export type TasksWhereInputStatus = EnumTaskStatusFilter | TaskStatus;
/**
 *
 * @export
 * @interface Users
 */
export interface Users {
    /**
     *
     * @type {string}
     * @memberof Users
     */
    'createdAt'?: string;
    /**
     *
     * @type {string}
     * @memberof Users
     */
    'email'?: string;
    /**
     *
     * @type {string}
     * @memberof Users
     */
    'id'?: string;
    /**
     *
     * @type {string}
     * @memberof Users
     */
    'passwordHash'?: string;
    /**
     *
     * @type {Array<Tasks>}
     * @memberof Users
     */
    'tasks'?: Array<Tasks> | null;
    /**
     *
     * @type {string}
     * @memberof Users
     */
    'updatedAt'?: string;
    /**
     *
     * @type {string}
     * @memberof Users
     */
    'username'?: string;
}
/**
 *
 * @export
 * @interface UsersAggregateInput
 */
export interface UsersAggregateInput {
    /**
     *
     * @type {Array<string>}
     * @memberof UsersAggregateInput
     */
    '_count'?: Array<UsersAggregateInputCountEnum>;
    /**
     *
     * @type {Array<string>}
     * @memberof UsersAggregateInput
     */
    '_max'?: Array<UsersAggregateInputMaxEnum>;
    /**
     *
     * @type {Array<string>}
     * @memberof UsersAggregateInput
     */
    '_min'?: Array<UsersAggregateInputMinEnum>;
}
export declare const UsersAggregateInputCountEnum: {
    readonly All: "_all";
    readonly CreatedAt: "createdAt";
    readonly Email: "email";
    readonly Id: "id";
    readonly PasswordHash: "passwordHash";
    readonly UpdatedAt: "updatedAt";
    readonly Username: "username";
};
export type UsersAggregateInputCountEnum = typeof UsersAggregateInputCountEnum[keyof typeof UsersAggregateInputCountEnum];
export declare const UsersAggregateInputMaxEnum: {
    readonly CreatedAt: "createdAt";
    readonly Email: "email";
    readonly Id: "id";
    readonly PasswordHash: "passwordHash";
    readonly UpdatedAt: "updatedAt";
    readonly Username: "username";
};
export type UsersAggregateInputMaxEnum = typeof UsersAggregateInputMaxEnum[keyof typeof UsersAggregateInputMaxEnum];
export declare const UsersAggregateInputMinEnum: {
    readonly CreatedAt: "createdAt";
    readonly Email: "email";
    readonly Id: "id";
    readonly PasswordHash: "passwordHash";
    readonly UpdatedAt: "updatedAt";
    readonly Username: "username";
};
export type UsersAggregateInputMinEnum = typeof UsersAggregateInputMinEnum[keyof typeof UsersAggregateInputMinEnum];
/**
 *
 * @export
 * @interface UsersCountAggregateOutputType
 */
export interface UsersCountAggregateOutputType {
    /**
     *
     * @type {number}
     * @memberof UsersCountAggregateOutputType
     */
    '_all'?: number;
    /**
     *
     * @type {number}
     * @memberof UsersCountAggregateOutputType
     */
    'createdAt'?: number;
    /**
     *
     * @type {number}
     * @memberof UsersCountAggregateOutputType
     */
    'email'?: number;
    /**
     *
     * @type {number}
     * @memberof UsersCountAggregateOutputType
     */
    'id'?: number;
    /**
     *
     * @type {number}
     * @memberof UsersCountAggregateOutputType
     */
    'passwordHash'?: number;
    /**
     *
     * @type {number}
     * @memberof UsersCountAggregateOutputType
     */
    'updatedAt'?: number;
    /**
     *
     * @type {number}
     * @memberof UsersCountAggregateOutputType
     */
    'username'?: number;
}
/**
 *
 * @export
 * @interface UsersCountOrderByAggregateInput
 */
export interface UsersCountOrderByAggregateInput {
    /**
     *
     * @type {SortOrder}
     * @memberof UsersCountOrderByAggregateInput
     */
    'createdAt'?: SortOrder;
    /**
     *
     * @type {SortOrder}
     * @memberof UsersCountOrderByAggregateInput
     */
    'email'?: SortOrder;
    /**
     *
     * @type {SortOrder}
     * @memberof UsersCountOrderByAggregateInput
     */
    'id'?: SortOrder;
    /**
     *
     * @type {SortOrder}
     * @memberof UsersCountOrderByAggregateInput
     */
    'passwordHash'?: SortOrder;
    /**
     *
     * @type {SortOrder}
     * @memberof UsersCountOrderByAggregateInput
     */
    'updatedAt'?: SortOrder;
    /**
     *
     * @type {SortOrder}
     * @memberof UsersCountOrderByAggregateInput
     */
    'username'?: SortOrder;
}
/**
 *
 * @export
 * @interface UsersCreateInput
 */
export interface UsersCreateInput {
    /**
     *
     * @type {string}
     * @memberof UsersCreateInput
     */
    'createdAt'?: string;
    /**
     *
     * @type {string}
     * @memberof UsersCreateInput
     */
    'email': string;
    /**
     *
     * @type {string}
     * @memberof UsersCreateInput
     */
    'id'?: string;
    /**
     *
     * @type {string}
     * @memberof UsersCreateInput
     */
    'passwordHash': string;
    /**
     *
     * @type {UsersCreateInputTasks}
     * @memberof UsersCreateInput
     */
    'tasks'?: UsersCreateInputTasks;
    /**
     *
     * @type {string}
     * @memberof UsersCreateInput
     */
    'updatedAt': string;
    /**
     *
     * @type {string}
     * @memberof UsersCreateInput
     */
    'username': string;
}
/**
 * @type UsersCreateInputTasks
 * @export
 */
export type UsersCreateInputTasks = Array<TasksCreateInput> | TasksCreateInput | TasksListCreateEnvelopeInput;
/**
 *
 * @export
 * @interface UsersCreateManyInput
 */
export interface UsersCreateManyInput {
    /**
     *
     * @type {string}
     * @memberof UsersCreateManyInput
     */
    'createdAt'?: string;
    /**
     *
     * @type {string}
     * @memberof UsersCreateManyInput
     */
    'email': string;
    /**
     *
     * @type {string}
     * @memberof UsersCreateManyInput
     */
    'id'?: string;
    /**
     *
     * @type {string}
     * @memberof UsersCreateManyInput
     */
    'passwordHash': string;
    /**
     *
     * @type {UsersCreateInputTasks}
     * @memberof UsersCreateManyInput
     */
    'tasks'?: UsersCreateInputTasks;
    /**
     *
     * @type {string}
     * @memberof UsersCreateManyInput
     */
    'updatedAt': string;
    /**
     *
     * @type {string}
     * @memberof UsersCreateManyInput
     */
    'username': string;
}
/**
 *
 * @export
 * @interface UsersGroupByInput
 */
export interface UsersGroupByInput {
    /**
     *
     * @type {Array<string>}
     * @memberof UsersGroupByInput
     */
    '_count'?: Array<UsersGroupByInputCountEnum>;
    /**
     *
     * @type {Array<string>}
     * @memberof UsersGroupByInput
     */
    '_max'?: Array<UsersGroupByInputMaxEnum>;
    /**
     *
     * @type {Array<string>}
     * @memberof UsersGroupByInput
     */
    '_min'?: Array<UsersGroupByInputMinEnum>;
    /**
     *
     * @type {boolean}
     * @memberof UsersGroupByInput
     */
    'createdAt'?: boolean;
    /**
     *
     * @type {boolean}
     * @memberof UsersGroupByInput
     */
    'email'?: boolean;
    /**
     *
     * @type {boolean}
     * @memberof UsersGroupByInput
     */
    'id'?: boolean;
    /**
     *
     * @type {boolean}
     * @memberof UsersGroupByInput
     */
    'passwordHash'?: boolean;
    /**
     *
     * @type {boolean}
     * @memberof UsersGroupByInput
     */
    'updatedAt'?: boolean;
    /**
     *
     * @type {boolean}
     * @memberof UsersGroupByInput
     */
    'username'?: boolean;
}
export declare const UsersGroupByInputCountEnum: {
    readonly All: "_all";
    readonly CreatedAt: "createdAt";
    readonly Email: "email";
    readonly Id: "id";
    readonly PasswordHash: "passwordHash";
    readonly UpdatedAt: "updatedAt";
    readonly Username: "username";
};
export type UsersGroupByInputCountEnum = typeof UsersGroupByInputCountEnum[keyof typeof UsersGroupByInputCountEnum];
export declare const UsersGroupByInputMaxEnum: {
    readonly CreatedAt: "createdAt";
    readonly Email: "email";
    readonly Id: "id";
    readonly PasswordHash: "passwordHash";
    readonly UpdatedAt: "updatedAt";
    readonly Username: "username";
};
export type UsersGroupByInputMaxEnum = typeof UsersGroupByInputMaxEnum[keyof typeof UsersGroupByInputMaxEnum];
export declare const UsersGroupByInputMinEnum: {
    readonly CreatedAt: "createdAt";
    readonly Email: "email";
    readonly Id: "id";
    readonly PasswordHash: "passwordHash";
    readonly UpdatedAt: "updatedAt";
    readonly Username: "username";
};
export type UsersGroupByInputMinEnum = typeof UsersGroupByInputMinEnum[keyof typeof UsersGroupByInputMinEnum];
/**
 *
 * @export
 * @interface UsersGroupByOutputType
 */
export interface UsersGroupByOutputType {
    /**
     *
     * @type {UsersCountAggregateOutputType}
     * @memberof UsersGroupByOutputType
     */
    '_count'?: UsersCountAggregateOutputType;
    /**
     *
     * @type {UsersMaxAggregateOutputType}
     * @memberof UsersGroupByOutputType
     */
    '_max'?: UsersMaxAggregateOutputType;
    /**
     *
     * @type {UsersMinAggregateOutputType}
     * @memberof UsersGroupByOutputType
     */
    '_min'?: UsersMinAggregateOutputType;
    /**
     *
     * @type {string}
     * @memberof UsersGroupByOutputType
     */
    'createdAt'?: string;
    /**
     *
     * @type {string}
     * @memberof UsersGroupByOutputType
     */
    'email'?: string;
    /**
     *
     * @type {string}
     * @memberof UsersGroupByOutputType
     */
    'id'?: string;
    /**
     *
     * @type {string}
     * @memberof UsersGroupByOutputType
     */
    'passwordHash'?: string;
    /**
     *
     * @type {string}
     * @memberof UsersGroupByOutputType
     */
    'updatedAt'?: string;
    /**
     *
     * @type {string}
     * @memberof UsersGroupByOutputType
     */
    'username'?: string;
}
/**
 *
 * @export
 * @interface UsersMaxAggregateOutputType
 */
export interface UsersMaxAggregateOutputType {
    /**
     *
     * @type {string}
     * @memberof UsersMaxAggregateOutputType
     */
    'createdAt'?: string | null;
    /**
     *
     * @type {string}
     * @memberof UsersMaxAggregateOutputType
     */
    'email'?: string | null;
    /**
     *
     * @type {string}
     * @memberof UsersMaxAggregateOutputType
     */
    'id'?: string | null;
    /**
     *
     * @type {string}
     * @memberof UsersMaxAggregateOutputType
     */
    'passwordHash'?: string | null;
    /**
     *
     * @type {string}
     * @memberof UsersMaxAggregateOutputType
     */
    'updatedAt'?: string | null;
    /**
     *
     * @type {string}
     * @memberof UsersMaxAggregateOutputType
     */
    'username'?: string | null;
}
/**
 *
 * @export
 * @interface UsersMaxOrderByAggregateInput
 */
export interface UsersMaxOrderByAggregateInput {
    /**
     *
     * @type {SortOrder}
     * @memberof UsersMaxOrderByAggregateInput
     */
    'createdAt'?: SortOrder;
    /**
     *
     * @type {SortOrder}
     * @memberof UsersMaxOrderByAggregateInput
     */
    'email'?: SortOrder;
    /**
     *
     * @type {SortOrder}
     * @memberof UsersMaxOrderByAggregateInput
     */
    'id'?: SortOrder;
    /**
     *
     * @type {SortOrder}
     * @memberof UsersMaxOrderByAggregateInput
     */
    'passwordHash'?: SortOrder;
    /**
     *
     * @type {SortOrder}
     * @memberof UsersMaxOrderByAggregateInput
     */
    'updatedAt'?: SortOrder;
    /**
     *
     * @type {SortOrder}
     * @memberof UsersMaxOrderByAggregateInput
     */
    'username'?: SortOrder;
}
/**
 *
 * @export
 * @interface UsersMinAggregateOutputType
 */
export interface UsersMinAggregateOutputType {
    /**
     *
     * @type {string}
     * @memberof UsersMinAggregateOutputType
     */
    'createdAt'?: string | null;
    /**
     *
     * @type {string}
     * @memberof UsersMinAggregateOutputType
     */
    'email'?: string | null;
    /**
     *
     * @type {string}
     * @memberof UsersMinAggregateOutputType
     */
    'id'?: string | null;
    /**
     *
     * @type {string}
     * @memberof UsersMinAggregateOutputType
     */
    'passwordHash'?: string | null;
    /**
     *
     * @type {string}
     * @memberof UsersMinAggregateOutputType
     */
    'updatedAt'?: string | null;
    /**
     *
     * @type {string}
     * @memberof UsersMinAggregateOutputType
     */
    'username'?: string | null;
}
/**
 *
 * @export
 * @interface UsersMinOrderByAggregateInput
 */
export interface UsersMinOrderByAggregateInput {
    /**
     *
     * @type {SortOrder}
     * @memberof UsersMinOrderByAggregateInput
     */
    'createdAt'?: SortOrder;
    /**
     *
     * @type {SortOrder}
     * @memberof UsersMinOrderByAggregateInput
     */
    'email'?: SortOrder;
    /**
     *
     * @type {SortOrder}
     * @memberof UsersMinOrderByAggregateInput
     */
    'id'?: SortOrder;
    /**
     *
     * @type {SortOrder}
     * @memberof UsersMinOrderByAggregateInput
     */
    'passwordHash'?: SortOrder;
    /**
     *
     * @type {SortOrder}
     * @memberof UsersMinOrderByAggregateInput
     */
    'updatedAt'?: SortOrder;
    /**
     *
     * @type {SortOrder}
     * @memberof UsersMinOrderByAggregateInput
     */
    'username'?: SortOrder;
}
/**
 *
 * @export
 * @interface UsersOrderByWithAggregationInput
 */
export interface UsersOrderByWithAggregationInput {
    /**
     *
     * @type {UsersCountOrderByAggregateInput}
     * @memberof UsersOrderByWithAggregationInput
     */
    '_count'?: UsersCountOrderByAggregateInput;
    /**
     *
     * @type {UsersMaxOrderByAggregateInput}
     * @memberof UsersOrderByWithAggregationInput
     */
    '_max'?: UsersMaxOrderByAggregateInput;
    /**
     *
     * @type {UsersMinOrderByAggregateInput}
     * @memberof UsersOrderByWithAggregationInput
     */
    '_min'?: UsersMinOrderByAggregateInput;
    /**
     *
     * @type {SortOrder}
     * @memberof UsersOrderByWithAggregationInput
     */
    'createdAt'?: SortOrder;
    /**
     *
     * @type {SortOrder}
     * @memberof UsersOrderByWithAggregationInput
     */
    'email'?: SortOrder;
    /**
     *
     * @type {SortOrder}
     * @memberof UsersOrderByWithAggregationInput
     */
    'id'?: SortOrder;
    /**
     *
     * @type {SortOrder}
     * @memberof UsersOrderByWithAggregationInput
     */
    'passwordHash'?: SortOrder;
    /**
     *
     * @type {SortOrder}
     * @memberof UsersOrderByWithAggregationInput
     */
    'updatedAt'?: SortOrder;
    /**
     *
     * @type {SortOrder}
     * @memberof UsersOrderByWithAggregationInput
     */
    'username'?: SortOrder;
}
/**
 *
 * @export
 * @interface UsersOrderByWithRelationInput
 */
export interface UsersOrderByWithRelationInput {
    /**
     *
     * @type {SortOrder}
     * @memberof UsersOrderByWithRelationInput
     */
    'createdAt'?: SortOrder;
    /**
     *
     * @type {SortOrder}
     * @memberof UsersOrderByWithRelationInput
     */
    'email'?: SortOrder;
    /**
     *
     * @type {SortOrder}
     * @memberof UsersOrderByWithRelationInput
     */
    'id'?: SortOrder;
    /**
     *
     * @type {SortOrder}
     * @memberof UsersOrderByWithRelationInput
     */
    'passwordHash'?: SortOrder;
    /**
     *
     * @type {TasksOrderByCompositeAggregateInput}
     * @memberof UsersOrderByWithRelationInput
     */
    'tasks'?: TasksOrderByCompositeAggregateInput;
    /**
     *
     * @type {SortOrder}
     * @memberof UsersOrderByWithRelationInput
     */
    'updatedAt'?: SortOrder;
    /**
     *
     * @type {SortOrder}
     * @memberof UsersOrderByWithRelationInput
     */
    'username'?: SortOrder;
}
/**
 *
 * @export
 * @enum {string}
 */
export declare const UsersScalarFieldEnum: {
    readonly CreatedAt: "createdAt";
    readonly Email: "email";
    readonly Id: "id";
    readonly PasswordHash: "passwordHash";
    readonly UpdatedAt: "updatedAt";
    readonly Username: "username";
};
export type UsersScalarFieldEnum = typeof UsersScalarFieldEnum[keyof typeof UsersScalarFieldEnum];
/**
 *
 * @export
 * @interface UsersScalarWhereWithAggregatesInput
 */
export interface UsersScalarWhereWithAggregatesInput {
    /**
     *
     * @type {UsersScalarWhereWithAggregatesInputAND}
     * @memberof UsersScalarWhereWithAggregatesInput
     */
    'AND'?: UsersScalarWhereWithAggregatesInputAND;
    /**
     *
     * @type {UsersScalarWhereWithAggregatesInputAND}
     * @memberof UsersScalarWhereWithAggregatesInput
     */
    'NOT'?: UsersScalarWhereWithAggregatesInputAND;
    /**
     *
     * @type {Array<UsersScalarWhereWithAggregatesInput>}
     * @memberof UsersScalarWhereWithAggregatesInput
     */
    'OR'?: Array<UsersScalarWhereWithAggregatesInput>;
    /**
     *
     * @type {CategoriesScalarWhereWithAggregatesInputCreatedAt}
     * @memberof UsersScalarWhereWithAggregatesInput
     */
    'createdAt'?: CategoriesScalarWhereWithAggregatesInputCreatedAt;
    /**
     *
     * @type {CategoriesScalarWhereWithAggregatesInputCategoryName}
     * @memberof UsersScalarWhereWithAggregatesInput
     */
    'email'?: CategoriesScalarWhereWithAggregatesInputCategoryName;
    /**
     *
     * @type {CategoriesScalarWhereWithAggregatesInputCategoryName}
     * @memberof UsersScalarWhereWithAggregatesInput
     */
    'id'?: CategoriesScalarWhereWithAggregatesInputCategoryName;
    /**
     *
     * @type {CategoriesScalarWhereWithAggregatesInputCategoryName}
     * @memberof UsersScalarWhereWithAggregatesInput
     */
    'passwordHash'?: CategoriesScalarWhereWithAggregatesInputCategoryName;
    /**
     *
     * @type {CategoriesScalarWhereWithAggregatesInputCreatedAt}
     * @memberof UsersScalarWhereWithAggregatesInput
     */
    'updatedAt'?: CategoriesScalarWhereWithAggregatesInputCreatedAt;
    /**
     *
     * @type {CategoriesScalarWhereWithAggregatesInputCategoryName}
     * @memberof UsersScalarWhereWithAggregatesInput
     */
    'username'?: CategoriesScalarWhereWithAggregatesInputCategoryName;
}
/**
 * @type UsersScalarWhereWithAggregatesInputAND
 * @export
 */
export type UsersScalarWhereWithAggregatesInputAND = Array<UsersScalarWhereWithAggregatesInput> | UsersScalarWhereWithAggregatesInput;
/**
 *
 * @export
 * @interface UsersSelectInput
 */
export interface UsersSelectInput {
    /**
     *
     * @type {boolean}
     * @memberof UsersSelectInput
     */
    '$innerObjects'?: boolean;
    /**
     *
     * @type {boolean}
     * @memberof UsersSelectInput
     */
    '$related'?: boolean;
    /**
     *
     * @type {boolean}
     * @memberof UsersSelectInput
     */
    '$scalars'?: boolean;
    /**
     *
     * @type {boolean}
     * @memberof UsersSelectInput
     */
    'createdAt'?: boolean;
    /**
     *
     * @type {boolean}
     * @memberof UsersSelectInput
     */
    'email'?: boolean;
    /**
     *
     * @type {boolean}
     * @memberof UsersSelectInput
     */
    'id'?: boolean;
    /**
     *
     * @type {boolean}
     * @memberof UsersSelectInput
     */
    'passwordHash'?: boolean;
    /**
     *
     * @type {UsersSelectInputTasks}
     * @memberof UsersSelectInput
     */
    'tasks'?: UsersSelectInputTasks;
    /**
     *
     * @type {boolean}
     * @memberof UsersSelectInput
     */
    'updatedAt'?: boolean;
    /**
     *
     * @type {boolean}
     * @memberof UsersSelectInput
     */
    'username'?: boolean;
}
/**
 * @type UsersSelectInputTasks
 * @export
 */
export type UsersSelectInputTasks = TasksSelectInput | boolean;
/**
 *
 * @export
 * @interface UsersUpdateInput
 */
export interface UsersUpdateInput {
    /**
     *
     * @type {CategoriesUpdateInputCreatedAt}
     * @memberof UsersUpdateInput
     */
    'createdAt'?: CategoriesUpdateInputCreatedAt;
    /**
     *
     * @type {CategoriesUpdateInputCategoryName}
     * @memberof UsersUpdateInput
     */
    'email'?: CategoriesUpdateInputCategoryName;
    /**
     *
     * @type {CategoriesUpdateInputCategoryName}
     * @memberof UsersUpdateInput
     */
    'passwordHash'?: CategoriesUpdateInputCategoryName;
    /**
     *
     * @type {UsersUpdateInputTasks}
     * @memberof UsersUpdateInput
     */
    'tasks'?: UsersUpdateInputTasks;
    /**
     *
     * @type {CategoriesUpdateInputCreatedAt}
     * @memberof UsersUpdateInput
     */
    'updatedAt'?: CategoriesUpdateInputCreatedAt;
    /**
     *
     * @type {CategoriesUpdateInputCategoryName}
     * @memberof UsersUpdateInput
     */
    'username'?: CategoriesUpdateInputCategoryName;
}
/**
 * @type UsersUpdateInputTasks
 * @export
 */
export type UsersUpdateInputTasks = Array<TasksCreateInput> | TasksCreateInput | TasksListUpdateEnvelopeInput;
/**
 *
 * @export
 * @interface UsersUpdateManyInput
 */
export interface UsersUpdateManyInput {
    /**
     *
     * @type {CategoriesUpdateInputCreatedAt}
     * @memberof UsersUpdateManyInput
     */
    'createdAt'?: CategoriesUpdateInputCreatedAt;
    /**
     *
     * @type {CategoriesUpdateInputCategoryName}
     * @memberof UsersUpdateManyInput
     */
    'email'?: CategoriesUpdateInputCategoryName;
    /**
     *
     * @type {CategoriesUpdateInputCategoryName}
     * @memberof UsersUpdateManyInput
     */
    'passwordHash'?: CategoriesUpdateInputCategoryName;
    /**
     *
     * @type {UsersUpdateInputTasks}
     * @memberof UsersUpdateManyInput
     */
    'tasks'?: UsersUpdateInputTasks;
    /**
     *
     * @type {CategoriesUpdateInputCreatedAt}
     * @memberof UsersUpdateManyInput
     */
    'updatedAt'?: CategoriesUpdateInputCreatedAt;
    /**
     *
     * @type {CategoriesUpdateInputCategoryName}
     * @memberof UsersUpdateManyInput
     */
    'username'?: CategoriesUpdateInputCategoryName;
}
/**
 *
 * @export
 * @interface UsersWhereInput
 */
export interface UsersWhereInput {
    /**
     *
     * @type {UsersWhereInputAND}
     * @memberof UsersWhereInput
     */
    'AND'?: UsersWhereInputAND;
    /**
     *
     * @type {UsersWhereInputAND}
     * @memberof UsersWhereInput
     */
    'NOT'?: UsersWhereInputAND;
    /**
     *
     * @type {Array<UsersWhereInput>}
     * @memberof UsersWhereInput
     */
    'OR'?: Array<UsersWhereInput>;
    /**
     *
     * @type {CategoriesWhereInputCreatedAt}
     * @memberof UsersWhereInput
     */
    'createdAt'?: CategoriesWhereInputCreatedAt;
    /**
     *
     * @type {CategoriesWhereInputCategoryName}
     * @memberof UsersWhereInput
     */
    'email'?: CategoriesWhereInputCategoryName;
    /**
     *
     * @type {CategoriesWhereInputCategoryName}
     * @memberof UsersWhereInput
     */
    'id'?: CategoriesWhereInputCategoryName;
    /**
     *
     * @type {CategoriesWhereInputCategoryName}
     * @memberof UsersWhereInput
     */
    'passwordHash'?: CategoriesWhereInputCategoryName;
    /**
     *
     * @type {UsersWhereInputTasks}
     * @memberof UsersWhereInput
     */
    'tasks'?: UsersWhereInputTasks;
    /**
     *
     * @type {CategoriesWhereInputCreatedAt}
     * @memberof UsersWhereInput
     */
    'updatedAt'?: CategoriesWhereInputCreatedAt;
    /**
     *
     * @type {CategoriesWhereInputCategoryName}
     * @memberof UsersWhereInput
     */
    'username'?: CategoriesWhereInputCategoryName;
}
/**
 * @type UsersWhereInputAND
 * @export
 */
export type UsersWhereInputAND = Array<UsersWhereInput> | UsersWhereInput;
/**
 * @type UsersWhereInputTasks
 * @export
 */
export type UsersWhereInputTasks = Array<TasksObjectEqualityInput> | TasksCompositeListFilter | TasksObjectEqualityInput;
/**
 *
 * @export
 * @interface UsersWhereUniqueInput
 */
export interface UsersWhereUniqueInput {
    /**
     *
     * @type {string}
     * @memberof UsersWhereUniqueInput
     */
    'email'?: string;
    /**
     *
     * @type {string}
     * @memberof UsersWhereUniqueInput
     */
    'id'?: string;
    /**
     *
     * @type {string}
     * @memberof UsersWhereUniqueInput
     */
    'username'?: string;
}
/**
 * CategoriesApi - axios parameter creator
 * @export
 */
export declare const CategoriesApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Aggregate by categories
     * @param {CategoriesAggregateInput} select
     * @param {CategoriesWhereInput} [filter]
     * @param {Array<CategoriesOrderByWithRelationInput>} [orderBy]
     * @param {number} [skip]
     * @param {number} [take]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    aggregateByCategories: (select: CategoriesAggregateInput, filter?: CategoriesWhereInput, orderBy?: Array<CategoriesOrderByWithRelationInput>, skip?: number, take?: number, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Create multiple categories records
     * @param {Array<CategoriesCreateManyInput>} categoriesCreateManyInput
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createManyCategories: (categoriesCreateManyInput: Array<CategoriesCreateManyInput>, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Create one categories record
     * @param {CategoriesCreateInput} categoriesCreateInput
     * @param {CategoriesSelectInput} [select]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createOneCategories: (categoriesCreateInput: CategoriesCreateInput, select?: CategoriesSelectInput, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Delete multiple categories records
     * @param {CategoriesWhereInput} [filter]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteCategories: (filter?: CategoriesWhereInput, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Delete one categories record by id
     * @param {string} value
     * @param {CategoriesSelectInput} [select]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteCategoriesById: (value: string, select?: CategoriesSelectInput, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Retrieve multiple categories records
     * @param {CategoriesSelectInput} [select]
     * @param {CategoriesWhereInput} [filter]
     * @param {Array<CategoriesOrderByWithRelationInput>} [orderBy]
     * @param {number} [skip]
     * @param {number} [take]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findCategories: (select?: CategoriesSelectInput, filter?: CategoriesWhereInput, orderBy?: Array<CategoriesOrderByWithRelationInput>, skip?: number, take?: number, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Find one categories record by id
     * @param {string} value
     * @param {CategoriesSelectInput} [select]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findCategoriesById: (value: string, select?: CategoriesSelectInput, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Group by categories
     * @param {CategoriesGroupByInput} select
     * @param {CategoriesWhereInput} [filter]
     * @param {Array<CategoriesOrderByWithAggregationInput>} [orderBy]
     * @param {Array<CategoriesScalarFieldEnum>} [groupBy]
     * @param {CategoriesScalarWhereWithAggregatesInput} [having]
     * @param {number} [skip]
     * @param {number} [take]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    groupByCategories: (select: CategoriesGroupByInput, filter?: CategoriesWhereInput, orderBy?: Array<CategoriesOrderByWithAggregationInput>, groupBy?: Array<CategoriesScalarFieldEnum>, having?: CategoriesScalarWhereWithAggregatesInput, skip?: number, take?: number, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Update multiple categories records
     * @param {CategoriesUpdateManyInput} categoriesUpdateManyInput
     * @param {CategoriesWhereInput} [filter]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateCategories: (categoriesUpdateManyInput: CategoriesUpdateManyInput, filter?: CategoriesWhereInput, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Update one categories record by id
     * @param {string} value
     * @param {CategoriesUpdateInput} categoriesUpdateInput
     * @param {CategoriesSelectInput} [select]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateCategoriesById: (value: string, categoriesUpdateInput: CategoriesUpdateInput, select?: CategoriesSelectInput, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * CategoriesApi - functional programming interface
 * @export
 */
export declare const CategoriesApiFp: (configuration?: Configuration) => {
    /**
     * Aggregate by categories
     * @param {CategoriesAggregateInput} select
     * @param {CategoriesWhereInput} [filter]
     * @param {Array<CategoriesOrderByWithRelationInput>} [orderBy]
     * @param {number} [skip]
     * @param {number} [take]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    aggregateByCategories(select: CategoriesAggregateInput, filter?: CategoriesWhereInput, orderBy?: Array<CategoriesOrderByWithRelationInput>, skip?: number, take?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AggregateByCategories200Response>>;
    /**
     * Create multiple categories records
     * @param {Array<CategoriesCreateManyInput>} categoriesCreateManyInput
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createManyCategories(categoriesCreateManyInput: Array<CategoriesCreateManyInput>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateManyCategories201Response>>;
    /**
     * Create one categories record
     * @param {CategoriesCreateInput} categoriesCreateInput
     * @param {CategoriesSelectInput} [select]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createOneCategories(categoriesCreateInput: CategoriesCreateInput, select?: CategoriesSelectInput, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateOneCategories201Response>>;
    /**
     * Delete multiple categories records
     * @param {CategoriesWhereInput} [filter]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteCategories(filter?: CategoriesWhereInput, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateManyCategories201Response>>;
    /**
     * Delete one categories record by id
     * @param {string} value
     * @param {CategoriesSelectInput} [select]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteCategoriesById(value: string, select?: CategoriesSelectInput, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateOneCategories201Response>>;
    /**
     * Retrieve multiple categories records
     * @param {CategoriesSelectInput} [select]
     * @param {CategoriesWhereInput} [filter]
     * @param {Array<CategoriesOrderByWithRelationInput>} [orderBy]
     * @param {number} [skip]
     * @param {number} [take]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findCategories(select?: CategoriesSelectInput, filter?: CategoriesWhereInput, orderBy?: Array<CategoriesOrderByWithRelationInput>, skip?: number, take?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FindCategories200Response>>;
    /**
     * Find one categories record by id
     * @param {string} value
     * @param {CategoriesSelectInput} [select]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findCategoriesById(value: string, select?: CategoriesSelectInput, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateOneCategories201Response>>;
    /**
     * Group by categories
     * @param {CategoriesGroupByInput} select
     * @param {CategoriesWhereInput} [filter]
     * @param {Array<CategoriesOrderByWithAggregationInput>} [orderBy]
     * @param {Array<CategoriesScalarFieldEnum>} [groupBy]
     * @param {CategoriesScalarWhereWithAggregatesInput} [having]
     * @param {number} [skip]
     * @param {number} [take]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    groupByCategories(select: CategoriesGroupByInput, filter?: CategoriesWhereInput, orderBy?: Array<CategoriesOrderByWithAggregationInput>, groupBy?: Array<CategoriesScalarFieldEnum>, having?: CategoriesScalarWhereWithAggregatesInput, skip?: number, take?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GroupByCategories200Response>>;
    /**
     * Update multiple categories records
     * @param {CategoriesUpdateManyInput} categoriesUpdateManyInput
     * @param {CategoriesWhereInput} [filter]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateCategories(categoriesUpdateManyInput: CategoriesUpdateManyInput, filter?: CategoriesWhereInput, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateManyCategories201Response>>;
    /**
     * Update one categories record by id
     * @param {string} value
     * @param {CategoriesUpdateInput} categoriesUpdateInput
     * @param {CategoriesSelectInput} [select]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateCategoriesById(value: string, categoriesUpdateInput: CategoriesUpdateInput, select?: CategoriesSelectInput, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateOneCategories201Response>>;
};
/**
 * CategoriesApi - factory interface
 * @export
 */
export declare const CategoriesApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Aggregate by categories
     * @param {CategoriesAggregateInput} select
     * @param {CategoriesWhereInput} [filter]
     * @param {Array<CategoriesOrderByWithRelationInput>} [orderBy]
     * @param {number} [skip]
     * @param {number} [take]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    aggregateByCategories(select: CategoriesAggregateInput, filter?: CategoriesWhereInput, orderBy?: Array<CategoriesOrderByWithRelationInput>, skip?: number, take?: number, options?: any): AxiosPromise<AggregateByCategories200Response>;
    /**
     * Create multiple categories records
     * @param {Array<CategoriesCreateManyInput>} categoriesCreateManyInput
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createManyCategories(categoriesCreateManyInput: Array<CategoriesCreateManyInput>, options?: any): AxiosPromise<CreateManyCategories201Response>;
    /**
     * Create one categories record
     * @param {CategoriesCreateInput} categoriesCreateInput
     * @param {CategoriesSelectInput} [select]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createOneCategories(categoriesCreateInput: CategoriesCreateInput, select?: CategoriesSelectInput, options?: any): AxiosPromise<CreateOneCategories201Response>;
    /**
     * Delete multiple categories records
     * @param {CategoriesWhereInput} [filter]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteCategories(filter?: CategoriesWhereInput, options?: any): AxiosPromise<CreateManyCategories201Response>;
    /**
     * Delete one categories record by id
     * @param {string} value
     * @param {CategoriesSelectInput} [select]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteCategoriesById(value: string, select?: CategoriesSelectInput, options?: any): AxiosPromise<CreateOneCategories201Response>;
    /**
     * Retrieve multiple categories records
     * @param {CategoriesSelectInput} [select]
     * @param {CategoriesWhereInput} [filter]
     * @param {Array<CategoriesOrderByWithRelationInput>} [orderBy]
     * @param {number} [skip]
     * @param {number} [take]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findCategories(select?: CategoriesSelectInput, filter?: CategoriesWhereInput, orderBy?: Array<CategoriesOrderByWithRelationInput>, skip?: number, take?: number, options?: any): AxiosPromise<FindCategories200Response>;
    /**
     * Find one categories record by id
     * @param {string} value
     * @param {CategoriesSelectInput} [select]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findCategoriesById(value: string, select?: CategoriesSelectInput, options?: any): AxiosPromise<CreateOneCategories201Response>;
    /**
     * Group by categories
     * @param {CategoriesGroupByInput} select
     * @param {CategoriesWhereInput} [filter]
     * @param {Array<CategoriesOrderByWithAggregationInput>} [orderBy]
     * @param {Array<CategoriesScalarFieldEnum>} [groupBy]
     * @param {CategoriesScalarWhereWithAggregatesInput} [having]
     * @param {number} [skip]
     * @param {number} [take]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    groupByCategories(select: CategoriesGroupByInput, filter?: CategoriesWhereInput, orderBy?: Array<CategoriesOrderByWithAggregationInput>, groupBy?: Array<CategoriesScalarFieldEnum>, having?: CategoriesScalarWhereWithAggregatesInput, skip?: number, take?: number, options?: any): AxiosPromise<GroupByCategories200Response>;
    /**
     * Update multiple categories records
     * @param {CategoriesUpdateManyInput} categoriesUpdateManyInput
     * @param {CategoriesWhereInput} [filter]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateCategories(categoriesUpdateManyInput: CategoriesUpdateManyInput, filter?: CategoriesWhereInput, options?: any): AxiosPromise<CreateManyCategories201Response>;
    /**
     * Update one categories record by id
     * @param {string} value
     * @param {CategoriesUpdateInput} categoriesUpdateInput
     * @param {CategoriesSelectInput} [select]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateCategoriesById(value: string, categoriesUpdateInput: CategoriesUpdateInput, select?: CategoriesSelectInput, options?: any): AxiosPromise<CreateOneCategories201Response>;
};
/**
 * CategoriesApi - object-oriented interface
 * @export
 * @class CategoriesApi
 * @extends {BaseAPI}
 */
export declare class CategoriesApi extends BaseAPI {
    /**
     * Aggregate by categories
     * @param {CategoriesAggregateInput} select
     * @param {CategoriesWhereInput} [filter]
     * @param {Array<CategoriesOrderByWithRelationInput>} [orderBy]
     * @param {number} [skip]
     * @param {number} [take]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CategoriesApi
     */
    aggregateByCategories(select: CategoriesAggregateInput, filter?: CategoriesWhereInput, orderBy?: Array<CategoriesOrderByWithRelationInput>, skip?: number, take?: number, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<AggregateByCategories200Response, any>>;
    /**
     * Create multiple categories records
     * @param {Array<CategoriesCreateManyInput>} categoriesCreateManyInput
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CategoriesApi
     */
    createManyCategories(categoriesCreateManyInput: Array<CategoriesCreateManyInput>, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<CreateManyCategories201Response, any>>;
    /**
     * Create one categories record
     * @param {CategoriesCreateInput} categoriesCreateInput
     * @param {CategoriesSelectInput} [select]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CategoriesApi
     */
    createOneCategories(categoriesCreateInput: CategoriesCreateInput, select?: CategoriesSelectInput, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<CreateOneCategories201Response, any>>;
    /**
     * Delete multiple categories records
     * @param {CategoriesWhereInput} [filter]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CategoriesApi
     */
    deleteCategories(filter?: CategoriesWhereInput, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<CreateManyCategories201Response, any>>;
    /**
     * Delete one categories record by id
     * @param {string} value
     * @param {CategoriesSelectInput} [select]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CategoriesApi
     */
    deleteCategoriesById(value: string, select?: CategoriesSelectInput, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<CreateOneCategories201Response, any>>;
    /**
     * Retrieve multiple categories records
     * @param {CategoriesSelectInput} [select]
     * @param {CategoriesWhereInput} [filter]
     * @param {Array<CategoriesOrderByWithRelationInput>} [orderBy]
     * @param {number} [skip]
     * @param {number} [take]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CategoriesApi
     */
    findCategories(select?: CategoriesSelectInput, filter?: CategoriesWhereInput, orderBy?: Array<CategoriesOrderByWithRelationInput>, skip?: number, take?: number, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<FindCategories200Response, any>>;
    /**
     * Find one categories record by id
     * @param {string} value
     * @param {CategoriesSelectInput} [select]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CategoriesApi
     */
    findCategoriesById(value: string, select?: CategoriesSelectInput, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<CreateOneCategories201Response, any>>;
    /**
     * Group by categories
     * @param {CategoriesGroupByInput} select
     * @param {CategoriesWhereInput} [filter]
     * @param {Array<CategoriesOrderByWithAggregationInput>} [orderBy]
     * @param {Array<CategoriesScalarFieldEnum>} [groupBy]
     * @param {CategoriesScalarWhereWithAggregatesInput} [having]
     * @param {number} [skip]
     * @param {number} [take]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CategoriesApi
     */
    groupByCategories(select: CategoriesGroupByInput, filter?: CategoriesWhereInput, orderBy?: Array<CategoriesOrderByWithAggregationInput>, groupBy?: Array<CategoriesScalarFieldEnum>, having?: CategoriesScalarWhereWithAggregatesInput, skip?: number, take?: number, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<GroupByCategories200Response, any>>;
    /**
     * Update multiple categories records
     * @param {CategoriesUpdateManyInput} categoriesUpdateManyInput
     * @param {CategoriesWhereInput} [filter]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CategoriesApi
     */
    updateCategories(categoriesUpdateManyInput: CategoriesUpdateManyInput, filter?: CategoriesWhereInput, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<CreateManyCategories201Response, any>>;
    /**
     * Update one categories record by id
     * @param {string} value
     * @param {CategoriesUpdateInput} categoriesUpdateInput
     * @param {CategoriesSelectInput} [select]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CategoriesApi
     */
    updateCategoriesById(value: string, categoriesUpdateInput: CategoriesUpdateInput, select?: CategoriesSelectInput, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<CreateOneCategories201Response, any>>;
}
export declare const CategoriesApiService: CategoriesApi;
/**
 * UsersApi - axios parameter creator
 * @export
 */
export declare const UsersApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Aggregate by users
     * @param {UsersAggregateInput} select
     * @param {UsersWhereInput} [filter]
     * @param {Array<UsersOrderByWithRelationInput>} [orderBy]
     * @param {number} [skip]
     * @param {number} [take]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    aggregateByUsers: (select: UsersAggregateInput, filter?: UsersWhereInput, orderBy?: Array<UsersOrderByWithRelationInput>, skip?: number, take?: number, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Create multiple users records
     * @param {Array<UsersCreateManyInput>} usersCreateManyInput
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createManyUsers: (usersCreateManyInput: Array<UsersCreateManyInput>, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Create one users record
     * @param {UsersCreateInput} usersCreateInput
     * @param {UsersSelectInput} [select]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createOneUsers: (usersCreateInput: UsersCreateInput, select?: UsersSelectInput, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Delete multiple users records
     * @param {UsersWhereInput} [filter]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteUsers: (filter?: UsersWhereInput, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Delete one users record by email
     * @param {string} value
     * @param {UsersSelectInput} [select]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteUsersByEmail: (value: string, select?: UsersSelectInput, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Delete one users record by id
     * @param {string} value
     * @param {UsersSelectInput} [select]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteUsersById: (value: string, select?: UsersSelectInput, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Delete one users record by username
     * @param {string} value
     * @param {UsersSelectInput} [select]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteUsersByUsername: (value: string, select?: UsersSelectInput, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Retrieve multiple users records
     * @param {UsersSelectInput} [select]
     * @param {UsersWhereInput} [filter]
     * @param {Array<UsersOrderByWithRelationInput>} [orderBy]
     * @param {number} [skip]
     * @param {number} [take]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findUsers: (select?: UsersSelectInput, filter?: UsersWhereInput, orderBy?: Array<UsersOrderByWithRelationInput>, skip?: number, take?: number, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Find one users record by email
     * @param {string} value
     * @param {UsersSelectInput} [select]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findUsersByEmail: (value: string, select?: UsersSelectInput, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Find one users record by id
     * @param {string} value
     * @param {UsersSelectInput} [select]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findUsersById: (value: string, select?: UsersSelectInput, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Find one users record by username
     * @param {string} value
     * @param {UsersSelectInput} [select]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findUsersByUsername: (value: string, select?: UsersSelectInput, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Group by users
     * @param {UsersGroupByInput} select
     * @param {UsersWhereInput} [filter]
     * @param {Array<UsersOrderByWithAggregationInput>} [orderBy]
     * @param {Array<UsersScalarFieldEnum>} [groupBy]
     * @param {UsersScalarWhereWithAggregatesInput} [having]
     * @param {number} [skip]
     * @param {number} [take]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    groupByUsers: (select: UsersGroupByInput, filter?: UsersWhereInput, orderBy?: Array<UsersOrderByWithAggregationInput>, groupBy?: Array<UsersScalarFieldEnum>, having?: UsersScalarWhereWithAggregatesInput, skip?: number, take?: number, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Update multiple users records
     * @param {UsersUpdateManyInput} usersUpdateManyInput
     * @param {UsersWhereInput} [filter]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateUsers: (usersUpdateManyInput: UsersUpdateManyInput, filter?: UsersWhereInput, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Update one users record by email
     * @param {string} value
     * @param {UsersUpdateInput} usersUpdateInput
     * @param {UsersSelectInput} [select]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateUsersByEmail: (value: string, usersUpdateInput: UsersUpdateInput, select?: UsersSelectInput, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Update one users record by id
     * @param {string} value
     * @param {UsersUpdateInput} usersUpdateInput
     * @param {UsersSelectInput} [select]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateUsersById: (value: string, usersUpdateInput: UsersUpdateInput, select?: UsersSelectInput, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Update one users record by username
     * @param {string} value
     * @param {UsersUpdateInput} usersUpdateInput
     * @param {UsersSelectInput} [select]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateUsersByUsername: (value: string, usersUpdateInput: UsersUpdateInput, select?: UsersSelectInput, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * UsersApi - functional programming interface
 * @export
 */
export declare const UsersApiFp: (configuration?: Configuration) => {
    /**
     * Aggregate by users
     * @param {UsersAggregateInput} select
     * @param {UsersWhereInput} [filter]
     * @param {Array<UsersOrderByWithRelationInput>} [orderBy]
     * @param {number} [skip]
     * @param {number} [take]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    aggregateByUsers(select: UsersAggregateInput, filter?: UsersWhereInput, orderBy?: Array<UsersOrderByWithRelationInput>, skip?: number, take?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AggregateByUsers200Response>>;
    /**
     * Create multiple users records
     * @param {Array<UsersCreateManyInput>} usersCreateManyInput
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createManyUsers(usersCreateManyInput: Array<UsersCreateManyInput>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateManyCategories201Response>>;
    /**
     * Create one users record
     * @param {UsersCreateInput} usersCreateInput
     * @param {UsersSelectInput} [select]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createOneUsers(usersCreateInput: UsersCreateInput, select?: UsersSelectInput, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateOneUsers201Response>>;
    /**
     * Delete multiple users records
     * @param {UsersWhereInput} [filter]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteUsers(filter?: UsersWhereInput, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateManyCategories201Response>>;
    /**
     * Delete one users record by email
     * @param {string} value
     * @param {UsersSelectInput} [select]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteUsersByEmail(value: string, select?: UsersSelectInput, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateOneUsers201Response>>;
    /**
     * Delete one users record by id
     * @param {string} value
     * @param {UsersSelectInput} [select]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteUsersById(value: string, select?: UsersSelectInput, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateOneUsers201Response>>;
    /**
     * Delete one users record by username
     * @param {string} value
     * @param {UsersSelectInput} [select]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteUsersByUsername(value: string, select?: UsersSelectInput, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateOneUsers201Response>>;
    /**
     * Retrieve multiple users records
     * @param {UsersSelectInput} [select]
     * @param {UsersWhereInput} [filter]
     * @param {Array<UsersOrderByWithRelationInput>} [orderBy]
     * @param {number} [skip]
     * @param {number} [take]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findUsers(select?: UsersSelectInput, filter?: UsersWhereInput, orderBy?: Array<UsersOrderByWithRelationInput>, skip?: number, take?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FindUsers200Response>>;
    /**
     * Find one users record by email
     * @param {string} value
     * @param {UsersSelectInput} [select]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findUsersByEmail(value: string, select?: UsersSelectInput, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateOneUsers201Response>>;
    /**
     * Find one users record by id
     * @param {string} value
     * @param {UsersSelectInput} [select]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findUsersById(value: string, select?: UsersSelectInput, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateOneUsers201Response>>;
    /**
     * Find one users record by username
     * @param {string} value
     * @param {UsersSelectInput} [select]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findUsersByUsername(value: string, select?: UsersSelectInput, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateOneUsers201Response>>;
    /**
     * Group by users
     * @param {UsersGroupByInput} select
     * @param {UsersWhereInput} [filter]
     * @param {Array<UsersOrderByWithAggregationInput>} [orderBy]
     * @param {Array<UsersScalarFieldEnum>} [groupBy]
     * @param {UsersScalarWhereWithAggregatesInput} [having]
     * @param {number} [skip]
     * @param {number} [take]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    groupByUsers(select: UsersGroupByInput, filter?: UsersWhereInput, orderBy?: Array<UsersOrderByWithAggregationInput>, groupBy?: Array<UsersScalarFieldEnum>, having?: UsersScalarWhereWithAggregatesInput, skip?: number, take?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GroupByUsers200Response>>;
    /**
     * Update multiple users records
     * @param {UsersUpdateManyInput} usersUpdateManyInput
     * @param {UsersWhereInput} [filter]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateUsers(usersUpdateManyInput: UsersUpdateManyInput, filter?: UsersWhereInput, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateManyCategories201Response>>;
    /**
     * Update one users record by email
     * @param {string} value
     * @param {UsersUpdateInput} usersUpdateInput
     * @param {UsersSelectInput} [select]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateUsersByEmail(value: string, usersUpdateInput: UsersUpdateInput, select?: UsersSelectInput, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateOneUsers201Response>>;
    /**
     * Update one users record by id
     * @param {string} value
     * @param {UsersUpdateInput} usersUpdateInput
     * @param {UsersSelectInput} [select]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateUsersById(value: string, usersUpdateInput: UsersUpdateInput, select?: UsersSelectInput, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateOneUsers201Response>>;
    /**
     * Update one users record by username
     * @param {string} value
     * @param {UsersUpdateInput} usersUpdateInput
     * @param {UsersSelectInput} [select]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateUsersByUsername(value: string, usersUpdateInput: UsersUpdateInput, select?: UsersSelectInput, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateOneUsers201Response>>;
};
/**
 * UsersApi - factory interface
 * @export
 */
export declare const UsersApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Aggregate by users
     * @param {UsersAggregateInput} select
     * @param {UsersWhereInput} [filter]
     * @param {Array<UsersOrderByWithRelationInput>} [orderBy]
     * @param {number} [skip]
     * @param {number} [take]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    aggregateByUsers(select: UsersAggregateInput, filter?: UsersWhereInput, orderBy?: Array<UsersOrderByWithRelationInput>, skip?: number, take?: number, options?: any): AxiosPromise<AggregateByUsers200Response>;
    /**
     * Create multiple users records
     * @param {Array<UsersCreateManyInput>} usersCreateManyInput
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createManyUsers(usersCreateManyInput: Array<UsersCreateManyInput>, options?: any): AxiosPromise<CreateManyCategories201Response>;
    /**
     * Create one users record
     * @param {UsersCreateInput} usersCreateInput
     * @param {UsersSelectInput} [select]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createOneUsers(usersCreateInput: UsersCreateInput, select?: UsersSelectInput, options?: any): AxiosPromise<CreateOneUsers201Response>;
    /**
     * Delete multiple users records
     * @param {UsersWhereInput} [filter]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteUsers(filter?: UsersWhereInput, options?: any): AxiosPromise<CreateManyCategories201Response>;
    /**
     * Delete one users record by email
     * @param {string} value
     * @param {UsersSelectInput} [select]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteUsersByEmail(value: string, select?: UsersSelectInput, options?: any): AxiosPromise<CreateOneUsers201Response>;
    /**
     * Delete one users record by id
     * @param {string} value
     * @param {UsersSelectInput} [select]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteUsersById(value: string, select?: UsersSelectInput, options?: any): AxiosPromise<CreateOneUsers201Response>;
    /**
     * Delete one users record by username
     * @param {string} value
     * @param {UsersSelectInput} [select]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteUsersByUsername(value: string, select?: UsersSelectInput, options?: any): AxiosPromise<CreateOneUsers201Response>;
    /**
     * Retrieve multiple users records
     * @param {UsersSelectInput} [select]
     * @param {UsersWhereInput} [filter]
     * @param {Array<UsersOrderByWithRelationInput>} [orderBy]
     * @param {number} [skip]
     * @param {number} [take]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findUsers(select?: UsersSelectInput, filter?: UsersWhereInput, orderBy?: Array<UsersOrderByWithRelationInput>, skip?: number, take?: number, options?: any): AxiosPromise<FindUsers200Response>;
    /**
     * Find one users record by email
     * @param {string} value
     * @param {UsersSelectInput} [select]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findUsersByEmail(value: string, select?: UsersSelectInput, options?: any): AxiosPromise<CreateOneUsers201Response>;
    /**
     * Find one users record by id
     * @param {string} value
     * @param {UsersSelectInput} [select]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findUsersById(value: string, select?: UsersSelectInput, options?: any): AxiosPromise<CreateOneUsers201Response>;
    /**
     * Find one users record by username
     * @param {string} value
     * @param {UsersSelectInput} [select]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findUsersByUsername(value: string, select?: UsersSelectInput, options?: any): AxiosPromise<CreateOneUsers201Response>;
    /**
     * Group by users
     * @param {UsersGroupByInput} select
     * @param {UsersWhereInput} [filter]
     * @param {Array<UsersOrderByWithAggregationInput>} [orderBy]
     * @param {Array<UsersScalarFieldEnum>} [groupBy]
     * @param {UsersScalarWhereWithAggregatesInput} [having]
     * @param {number} [skip]
     * @param {number} [take]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    groupByUsers(select: UsersGroupByInput, filter?: UsersWhereInput, orderBy?: Array<UsersOrderByWithAggregationInput>, groupBy?: Array<UsersScalarFieldEnum>, having?: UsersScalarWhereWithAggregatesInput, skip?: number, take?: number, options?: any): AxiosPromise<GroupByUsers200Response>;
    /**
     * Update multiple users records
     * @param {UsersUpdateManyInput} usersUpdateManyInput
     * @param {UsersWhereInput} [filter]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateUsers(usersUpdateManyInput: UsersUpdateManyInput, filter?: UsersWhereInput, options?: any): AxiosPromise<CreateManyCategories201Response>;
    /**
     * Update one users record by email
     * @param {string} value
     * @param {UsersUpdateInput} usersUpdateInput
     * @param {UsersSelectInput} [select]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateUsersByEmail(value: string, usersUpdateInput: UsersUpdateInput, select?: UsersSelectInput, options?: any): AxiosPromise<CreateOneUsers201Response>;
    /**
     * Update one users record by id
     * @param {string} value
     * @param {UsersUpdateInput} usersUpdateInput
     * @param {UsersSelectInput} [select]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateUsersById(value: string, usersUpdateInput: UsersUpdateInput, select?: UsersSelectInput, options?: any): AxiosPromise<CreateOneUsers201Response>;
    /**
     * Update one users record by username
     * @param {string} value
     * @param {UsersUpdateInput} usersUpdateInput
     * @param {UsersSelectInput} [select]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateUsersByUsername(value: string, usersUpdateInput: UsersUpdateInput, select?: UsersSelectInput, options?: any): AxiosPromise<CreateOneUsers201Response>;
};
/**
 * UsersApi - object-oriented interface
 * @export
 * @class UsersApi
 * @extends {BaseAPI}
 */
export declare class UsersApi extends BaseAPI {
    /**
     * Aggregate by users
     * @param {UsersAggregateInput} select
     * @param {UsersWhereInput} [filter]
     * @param {Array<UsersOrderByWithRelationInput>} [orderBy]
     * @param {number} [skip]
     * @param {number} [take]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    aggregateByUsers(select: UsersAggregateInput, filter?: UsersWhereInput, orderBy?: Array<UsersOrderByWithRelationInput>, skip?: number, take?: number, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<AggregateByUsers200Response, any>>;
    /**
     * Create multiple users records
     * @param {Array<UsersCreateManyInput>} usersCreateManyInput
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    createManyUsers(usersCreateManyInput: Array<UsersCreateManyInput>, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<CreateManyCategories201Response, any>>;
    /**
     * Create one users record
     * @param {UsersCreateInput} usersCreateInput
     * @param {UsersSelectInput} [select]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    createOneUsers(usersCreateInput: UsersCreateInput, select?: UsersSelectInput, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<CreateOneUsers201Response, any>>;
    /**
     * Delete multiple users records
     * @param {UsersWhereInput} [filter]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    deleteUsers(filter?: UsersWhereInput, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<CreateManyCategories201Response, any>>;
    /**
     * Delete one users record by email
     * @param {string} value
     * @param {UsersSelectInput} [select]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    deleteUsersByEmail(value: string, select?: UsersSelectInput, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<CreateOneUsers201Response, any>>;
    /**
     * Delete one users record by id
     * @param {string} value
     * @param {UsersSelectInput} [select]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    deleteUsersById(value: string, select?: UsersSelectInput, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<CreateOneUsers201Response, any>>;
    /**
     * Delete one users record by username
     * @param {string} value
     * @param {UsersSelectInput} [select]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    deleteUsersByUsername(value: string, select?: UsersSelectInput, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<CreateOneUsers201Response, any>>;
    /**
     * Retrieve multiple users records
     * @param {UsersSelectInput} [select]
     * @param {UsersWhereInput} [filter]
     * @param {Array<UsersOrderByWithRelationInput>} [orderBy]
     * @param {number} [skip]
     * @param {number} [take]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    findUsers(select?: UsersSelectInput, filter?: UsersWhereInput, orderBy?: Array<UsersOrderByWithRelationInput>, skip?: number, take?: number, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<FindUsers200Response, any>>;
    /**
     * Find one users record by email
     * @param {string} value
     * @param {UsersSelectInput} [select]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    findUsersByEmail(value: string, select?: UsersSelectInput, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<CreateOneUsers201Response, any>>;
    /**
     * Find one users record by id
     * @param {string} value
     * @param {UsersSelectInput} [select]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    findUsersById(value: string, select?: UsersSelectInput, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<CreateOneUsers201Response, any>>;
    /**
     * Find one users record by username
     * @param {string} value
     * @param {UsersSelectInput} [select]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    findUsersByUsername(value: string, select?: UsersSelectInput, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<CreateOneUsers201Response, any>>;
    /**
     * Group by users
     * @param {UsersGroupByInput} select
     * @param {UsersWhereInput} [filter]
     * @param {Array<UsersOrderByWithAggregationInput>} [orderBy]
     * @param {Array<UsersScalarFieldEnum>} [groupBy]
     * @param {UsersScalarWhereWithAggregatesInput} [having]
     * @param {number} [skip]
     * @param {number} [take]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    groupByUsers(select: UsersGroupByInput, filter?: UsersWhereInput, orderBy?: Array<UsersOrderByWithAggregationInput>, groupBy?: Array<UsersScalarFieldEnum>, having?: UsersScalarWhereWithAggregatesInput, skip?: number, take?: number, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<GroupByUsers200Response, any>>;
    /**
     * Update multiple users records
     * @param {UsersUpdateManyInput} usersUpdateManyInput
     * @param {UsersWhereInput} [filter]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    updateUsers(usersUpdateManyInput: UsersUpdateManyInput, filter?: UsersWhereInput, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<CreateManyCategories201Response, any>>;
    /**
     * Update one users record by email
     * @param {string} value
     * @param {UsersUpdateInput} usersUpdateInput
     * @param {UsersSelectInput} [select]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    updateUsersByEmail(value: string, usersUpdateInput: UsersUpdateInput, select?: UsersSelectInput, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<CreateOneUsers201Response, any>>;
    /**
     * Update one users record by id
     * @param {string} value
     * @param {UsersUpdateInput} usersUpdateInput
     * @param {UsersSelectInput} [select]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    updateUsersById(value: string, usersUpdateInput: UsersUpdateInput, select?: UsersSelectInput, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<CreateOneUsers201Response, any>>;
    /**
     * Update one users record by username
     * @param {string} value
     * @param {UsersUpdateInput} usersUpdateInput
     * @param {UsersSelectInput} [select]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    updateUsersByUsername(value: string, usersUpdateInput: UsersUpdateInput, select?: UsersSelectInput, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<CreateOneUsers201Response, any>>;
}
export declare const UsersApiService: UsersApi;
